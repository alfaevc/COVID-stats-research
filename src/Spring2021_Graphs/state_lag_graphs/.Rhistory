state_pop_dt$STATE_NAME <- toupper(state_pop_dt$STATE_NAME)
# change colum names
colnames(data) <- c("State", "Date", "New_Confirmed", "Event_Catg_S","Score", "Short_Description")
colnames(state_pop_dt) <- c("State", "Population")
# join covid and populaton data
data <- inner_join(data, state_pop_dt, by=c("State"))
data$Date <- as.Date(data$Date, format="%m/%d/%Y")
data$`New Cases/500,000 ppl`<-
round(data$New_Confirmed/(data$Population/500000))
# change event code to description
group_event_catg <- function(x){
new_col = c()
check = substr(x, nchar(x), nchar(x))
if (is.na(check)){
new_col <- append(new_col, x)
} else if(check == "M"){
new_col <- append(new_col, "Mandatory")
} else if (check == "R"){
new_col <- append(new_col, "Re-Issued")
} else if (check == "E"){
new_col <- append(new_col, "Eased")
} else if (check == "L"){
new_col <- append(new_col, "Lifted ")
}
}
data$event_MELR <- sapply(data$Event_Catg_S, FUN=group_event_catg)
# category num
big_catg <- function(x){
new_col = c()
if (is.na(x)){
new_col <- append(new_col, x)
}
else if(x=="15M"){
new_col <- append(new_col, "Face Covering")
} else if(grepl("2", x)){
new_col <- append(new_col, "Business Restrictions")
} else if(grepl("3", x)){
new_col <- append(new_col, "Indoor Gathering Restrictions")
} else if(grepl("4", x)){
new_col <- append(new_col, "Restaurant/Bar Restrictions")
} else{
new_col <- append(new_col, "Stay at Home Orders")
}
}
data$big_cat <- sapply(data$Event_Catg_S, FUN=big_catg)
data$event <- paste(data$big_cat, "\n", data$event_MELR)
# Implementation, Lifting, Ease
# lag_catg <- function(x){
#   new_col = c()
#   check = substr(x, nchar(x), nchar(x))
#   if (is.na(check)){
#     new_col <- append(new_col, "No Event")
#   }else if(check %in% c("M", "R", "I")){
#     new_col <- append(new_col, "Implemented")
#   } else if (check == "E"){
#     new_col <- append(new_col, "Eased")
#   } else if (check == "L"){
#     new_col <- append(new_col, "Lifted")
#   } else {
#     new_col <- append(new_col, "No Event")
#   }
# }
#data$lag_catg <- sapply(data$EVENT_CATG_S, FUN=lag_catg)
# check if score >= 3 or <3
score_threshold = 3
data$score_catg <- ifelse(data$Score>=score_threshold,
paste("Score>=",score_threshold, sep=""),
paste("Score<",score_threshold, sep=""))
plot_lag <- function(state, lead_n, window_num){
state_data <- data[data$State==state,]
identity_x <- seq(0, max(na.omit(state_data$`New Cases/500,000 ppl`)),
by=1)
identity_y <- identity_x
corr <- round(acf(na.omit(state_data$`New Cases/500,000 ppl`),
lag.max=lead_n,
plot=FALSE)[lead_n]$acf[1], digits=2)
state_data$`New Cases/500,000 ppl` =
rollmean(state_data$`New Cases/500,000 ppl`, window_num,
fill=NA)
state_data$n_lead = rep(NA, nrow(state_data))
for (i in 1:(nrow(state_data)-lead_n)){
today = state_data[i, "Date"]
n_day_after = today+lead_n
inst = state_data[as.character(state_data$Date)==as.character(n_day_after[1,1]),]
state_data$n_lead[i] = inst$`New Cases/500,000 ppl`
}
#state_data_cut <- state_data[!is.na(state_data$lag_catg),]
plot2 <- ggplot(data=state_data)+
geom_point(aes(x=`New Cases/500,000 ppl`, y=n_lead,
col=as.factor(score_catg),
text=paste("Date of x-axis:", Date,
"\nDate of y-axis:", Date+lead_n,
"\nEvent:", event)), size=2)+
#scale_color_manual(values=c("#f2615d", "#2d1160","#ffd799","#d9d9d9"),
#name="Event Category")+
# scale_color_manual(values=c("#f2615d", "#2d1160","#ffd799"),
#                    name="Event Category",
#                     labels=c("Eased", "Implemented", "Lifted", ""))+
scale_color_manual(values=c("#f2615d", "#2d1160"),
name="Score")+
geom_line(data=data.frame(identity_x, identity_y),
aes(x=identity_x, y=identity_y), linetype="dotted", size=1)+
xlim(0, 120) +
ylim(0, 300) +
labs(title=paste(str_to_title(state),"lag", lead_n, "correlation=", corr),
x="Today's Norm New Confirmed Cases",
y=paste("Normalized New Daily Cases", lead_n, "days later"))+
theme_bw()
ggplotly(plot2, tooltip="text")
}
#state=toupper("massachusetts")
# states = toupper(state.name)[22:length(state.name)]
# window_num = 7
# lags = c(7, 14, 21, 30)
# for (state in states){
#   for (lag_day in lags){
#     p <- plot_lag(state, lag_day, window_num)
#     htmlwidgets::saveWidget(as_widget(p),
#                            paste(tolower(state),"_lag_",lag_day,".html",sep=""))
#   }
# }
state = "TEXAS"
lag_day = 7
window_num = 7
plot_lag(state, lag_day, window_num) #function to plot - no need to change
#state=toupper("massachusetts")
# states = toupper(state.name)[22:length(state.name)]
# window_num = 7
# lags = c(7, 14, 21, 30)
# for (state in states){
#   for (lag_day in lags){
#     p <- plot_lag(state, lag_day, window_num)
#     htmlwidgets::saveWidget(as_widget(p),
#                            paste(tolower(state),"_lag_",lag_day,".html",sep=""))
#   }
# }
state = "TEXAS"
lag_day = 7
window_num = 7
p <- plot_lag(state, lag_day, window_num) #function to plot - no need to change
htmlwidgets::saveWidget(as_widget(p),                          paste(tolower(state),"_lag_",lag_day,".html",sep=""))
library(tidyverse)
library(ggplot2)
library(readr)
library(ggseas)
library(chron)
library(plotly)
library(zoo)
data <- read_csv("State_Cases_G1_Merged_01112021.csv") %>%
select(c("STATE", "DATE", "NEWCONFIRMED", "EVENT_CATG_S",
"SCORE", "SHORT_DESCRIPT"))
state_pop_dt <- read_csv("USA_States_Data.csv") %>%
select(c("STATE_NAME", "POPULATION"))
# change state population data state_name to all caps
state_pop_dt$STATE_NAME <- toupper(state_pop_dt$STATE_NAME)
# change colum names
colnames(data) <- c("State", "Date", "New_Confirmed", "Event_Catg_S","Score", "Short_Description")
colnames(state_pop_dt) <- c("State", "Population")
# join covid and populaton data
data <- inner_join(data, state_pop_dt, by=c("State"))
data$Date <- as.Date(data$Date, format="%m/%d/%Y")
data$`New Cases/500,000 ppl`<-
round(data$New_Confirmed/(data$Population/500000))
# change event code to description
group_event_catg <- function(x){
new_col = c()
check = substr(x, nchar(x), nchar(x))
if (is.na(check)){
new_col <- append(new_col, x)
} else if(check == "M"){
new_col <- append(new_col, "Mandatory")
} else if (check == "R"){
new_col <- append(new_col, "Re-Issued")
} else if (check == "E"){
new_col <- append(new_col, "Eased")
} else if (check == "L"){
new_col <- append(new_col, "Lifted ")
}
}
data$event_MELR <- sapply(data$Event_Catg_S, FUN=group_event_catg)
# category num
big_catg <- function(x){
new_col = c()
if (is.na(x)){
new_col <- append(new_col, x)
}
else if(x=="15M"){
new_col <- append(new_col, "Face Covering")
} else if(grepl("2", x)){
new_col <- append(new_col, "Business Restrictions")
} else if(grepl("3", x)){
new_col <- append(new_col, "Indoor Gathering Restrictions")
} else if(grepl("4", x)){
new_col <- append(new_col, "Restaurant/Bar Restrictions")
} else{
new_col <- append(new_col, "Stay at Home Orders")
}
}
data$big_cat <- sapply(data$Event_Catg_S, FUN=big_catg)
data$event <- paste(data$big_cat, "\n", data$event_MELR)
# Implementation, Lifting, Ease
# lag_catg <- function(x){
#   new_col = c()
#   check = substr(x, nchar(x), nchar(x))
#   if (is.na(check)){
#     new_col <- append(new_col, "No Event")
#   }else if(check %in% c("M", "R", "I")){
#     new_col <- append(new_col, "Implemented")
#   } else if (check == "E"){
#     new_col <- append(new_col, "Eased")
#   } else if (check == "L"){
#     new_col <- append(new_col, "Lifted")
#   } else {
#     new_col <- append(new_col, "No Event")
#   }
# }
#data$lag_catg <- sapply(data$EVENT_CATG_S, FUN=lag_catg)
# check if score >= 3 or <3
score_threshold = 3
data$score_catg <- ifelse(data$Score>=score_threshold,
paste("Score>=",score_threshold, sep=""),
paste("Score<",score_threshold, sep=""))
# add seasons
yq <- as.yearqtr(as.yearmon(data$Date) + 1/12)
data$Season <- factor(format(yq, "%q"), levels = 1:4,
labels = c("Winter", "Spring", "Summer", "Fall"))
plot_lag <- function(state, lead_n, window_num){
state_data <- data[data$State==state,]
identity_x <- seq(0, max(na.omit(state_data$`New Cases/500,000 ppl`)),
by=1)
identity_y <- identity_x
corr <- round(acf(na.omit(state_data$`New Cases/500,000 ppl`),
lag.max=lead_n,
plot=FALSE)[lead_n]$acf[1], digits=2)
state_data$`New Cases/500,000 ppl` =
round(rollmean(state_data$`New Cases/500,000 ppl`, window_num,
fill=NA))
state_data$n_lead = rep(NA, nrow(state_data))
for (i in 1:(nrow(state_data)-lead_n)){
today = state_data[i, "Date"]
n_day_after = today+lead_n
inst = state_data[as.character(state_data$Date)==as.character(n_day_after[1,1]),]
state_data$n_lead[i] = inst$`New Cases/500,000 ppl`
}
fig <- plot_ly(data=state_data)
# add points
fig <- fig %>%
add_trace(x=~`New Cases/500,000 ppl`, y=~`n_lead`,
color=~Season, symbol=~`score_catg`,
symbols=c("circle-open", "circle"),
text = ~paste(Season, '<br>', "Today's Date:", Date),
hovertemplate = paste("%{text}<br>",
"Today's Case: %{x}<br>",
paste("Cases After", lead_n,
"days: %{y}<br>")),
colors=c("#2D1160","#FFB078","#7ED1D6","#F2615D"))
# text = ~short.occupation,
#   hovertemplate = paste(
#     "<b>%{text}</b><br><br>",
#     "%{yaxis.title.text}: %{y:$,.0f}<br>",
#     "%{xaxis.title.text}: %{x:.0%}<br>",
#     "Number Employed: %{marker.size:,}",
#     "<extra></extra>"
#     )
# add identity line
fig <- fig %>%
add_trace(mode="lines", data=data.frame(identity_x, identity_y),
x=~identity_x, y=~identity_y,
line = list(color= "black", widthh=0.5, dash="dot"),
name="Identity Line")
fig <- fig %>% layout(
title = paste(str_to_title(state),"lag", lead_n, "correlation=",
corr),
yaxis = list(title=paste("Normalized New Daily Cases",
lead_n, "days later")),
xaxis = list(title="Today's Norm New Confirmed Cases"))
fig
}
#state=toupper("massachusetts")
# states = toupper(state.name)[22:length(state.name)]
# window_num = 7
# lags = c(7, 14, 21, 30)
# for (state in states){
#   for (lag_day in lags){
#     p <- plot_lag(state, lag_day, window_num)
#     htmlwidgets::saveWidget(as_widget(p),
#                            paste(tolower(state),"_lag_",lag_day,".html",sep=""))
#   }
# }
state = "TEXAS"
lag_day = 14
window_num = 7
p <- plot_lag(state, lag_day, window_num) #function to plot - no need to change
htmlwidgets::saveWidget(as_widget(p),                          paste(tolower(state),"_lag_",lag_day,".html",sep=""))
#state=toupper("massachusetts")
# states = toupper(state.name)[22:length(state.name)]
# window_num = 7
# lags = c(7, 14, 21, 30)
# for (state in states){
#   for (lag_day in lags){
#     p <- plot_lag(state, lag_day, window_num)
#     htmlwidgets::saveWidget(as_widget(p),
#                            paste(tolower(state),"_lag_",lag_day,".html",sep=""))
#   }
# }
state = "TEXAS"
lag_day = 7
window_num = 7
p <- plot_lag(state, lag_day, window_num) #function to plot - no need to change
htmlwidgets::saveWidget(as_widget(p),                          paste(tolower(state),"_lag_",lag_day,".html",sep=""))
#state=toupper("massachusetts")
# states = toupper(state.name)[22:length(state.name)]
# window_num = 7
# lags = c(7, 14, 21, 30)
# for (state in states){
#   for (lag_day in lags){
#     p <- plot_lag(state, lag_day, window_num)
#     htmlwidgets::saveWidget(as_widget(p),
#                            paste(tolower(state),"_lag_",lag_day,".html",sep=""))
#   }
# }
state = "TEXAS"
lag_day = 21
window_num = 7
p <- plot_lag(state, lag_day, window_num) #function to plot - no need to change
htmlwidgets::saveWidget(as_widget(p),                          paste(tolower(state),"_lag_",lag_day,".html",sep=""))
#state=toupper("massachusetts")
# states = toupper(state.name)[22:length(state.name)]
# window_num = 7
# lags = c(7, 14, 21, 30)
# for (state in states){
#   for (lag_day in lags){
#     p <- plot_lag(state, lag_day, window_num)
#     htmlwidgets::saveWidget(as_widget(p),
#                            paste(tolower(state),"_lag_",lag_day,".html",sep=""))
#   }
# }
state = "TEXAS"
lag_day = 30
window_num = 7
p <- plot_lag(state, lag_day, window_num) #function to plot - no need to change
htmlwidgets::saveWidget(as_widget(p),                          paste(tolower(state),"_lag_",lag_day,".html",sep=""))
library(tidyverse)
library(ggplot2)
library(readr)
library(ggseas)
library(chron)
library(plotly)
library(zoo)
data <- read_csv("State_Cases_G1_Merged_01112021.csv") %>%
select(c("STATE", "DATE", "NEWCONFIRMED", "EVENT_CATG_S",
"SCORE", "SHORT_DESCRIPT"))
state_pop_dt <- read_csv("USA_States_Data.csv") %>%
select(c("STATE_NAME", "POPULATION"))
# change state population data state_name to all caps
state_pop_dt$STATE_NAME <- toupper(state_pop_dt$STATE_NAME)
# change colum names
colnames(data) <- c("State", "Date", "New_Confirmed", "Event_Catg_S","Score", "Short_Description")
colnames(state_pop_dt) <- c("State", "Population")
# join covid and populaton data
data <- inner_join(data, state_pop_dt, by=c("State"))
data$Date <- as.Date(data$Date, format="%m/%d/%Y")
data$`New Cases/500,000 ppl`<-
round(data$New_Confirmed/(data$Population/500000))
# change event code to description
group_event_catg <- function(x){
new_col = c()
check = substr(x, nchar(x), nchar(x))
if (is.na(check)){
new_col <- append(new_col, x)
} else if(check == "M"){
new_col <- append(new_col, "Mandatory")
} else if (check == "R"){
new_col <- append(new_col, "Re-Issued")
} else if (check == "E"){
new_col <- append(new_col, "Eased")
} else if (check == "L"){
new_col <- append(new_col, "Lifted ")
}
}
data$event_MELR <- sapply(data$Event_Catg_S, FUN=group_event_catg)
# category num
big_catg <- function(x){
new_col = c()
if (is.na(x)){
new_col <- append(new_col, x)
}
else if(x=="15M"){
new_col <- append(new_col, "Face Covering")
} else if(grepl("2", x)){
new_col <- append(new_col, "Business Restrictions")
} else if(grepl("3", x)){
new_col <- append(new_col, "Indoor Gathering Restrictions")
} else if(grepl("4", x)){
new_col <- append(new_col, "Restaurant/Bar Restrictions")
} else{
new_col <- append(new_col, "Stay at Home Orders")
}
}
data$big_cat <- sapply(data$Event_Catg_S, FUN=big_catg)
data$event <- paste(data$big_cat, "\n", data$event_MELR)
# Implementation, Lifting, Ease
# lag_catg <- function(x){
#   new_col = c()
#   check = substr(x, nchar(x), nchar(x))
#   if (is.na(check)){
#     new_col <- append(new_col, "No Event")
#   }else if(check %in% c("M", "R", "I")){
#     new_col <- append(new_col, "Implemented")
#   } else if (check == "E"){
#     new_col <- append(new_col, "Eased")
#   } else if (check == "L"){
#     new_col <- append(new_col, "Lifted")
#   } else {
#     new_col <- append(new_col, "No Event")
#   }
# }
#data$lag_catg <- sapply(data$EVENT_CATG_S, FUN=lag_catg)
# check if score >= 3 or <3
score_threshold = 3
data$score_catg <- ifelse(data$Score>=score_threshold,
paste("Score>=",score_threshold, sep=""),
paste("Score<",score_threshold, sep=""))
# add seasons
yq <- as.yearqtr(as.yearmon(data$Date) + 1/12)
data$Season <- factor(format(yq, "%q"), levels = 1:4,
labels = c("Winter", "Spring", "Summer", "Fall"))
plot_lag <- function(state, lead_n, window_num){
state_data <- data[data$State==state,]
identity_x <- seq(0, max(na.omit(state_data$`New Cases/500,000 ppl`)),
by=1)
identity_y <- identity_x
corr <- round(acf(na.omit(state_data$`New Cases/500,000 ppl`),
lag.max=lead_n,
plot=FALSE)[lead_n]$acf[1], digits=2)
state_data$`New Cases/500,000 ppl` =
round(rollmean(state_data$`New Cases/500,000 ppl`, window_num,
fill=NA))
state_data$n_lead = rep(NA, nrow(state_data))
for (i in 1:(nrow(state_data)-lead_n)){
today = state_data[i, "Date"]
n_day_after = today+lead_n
inst = state_data[as.character(state_data$Date)==as.character(n_day_after[1,1]),]
state_data$n_lead[i] = inst$`New Cases/500,000 ppl`
}
fig <- plot_ly(data=state_data)
# add points
fig <- fig %>%
add_trace(x=~`New Cases/500,000 ppl`, y=~`n_lead`,
color=~Season, symbol=~`score_catg`,
symbols=c("circle-open", "circle"),
text = ~paste(Season, '<br>', "Today's Date:", Date),
hovertemplate = paste("%{text}<br>",
"Today's Case: %{x}<br>",
paste("Cases After", lead_n,
"days: %{y}<br>")),
colors=c("#2D1160","#FFB078","#7ED1D6","#F2615D"))
# text = ~short.occupation,
#   hovertemplate = paste(
#     "<b>%{text}</b><br><br>",
#     "%{yaxis.title.text}: %{y:$,.0f}<br>",
#     "%{xaxis.title.text}: %{x:.0%}<br>",
#     "Number Employed: %{marker.size:,}",
#     "<extra></extra>"
#     )
# add identity line
fig <- fig %>%
add_trace(mode="lines", data=data.frame(identity_x, identity_y),
x=~identity_x, y=~identity_y,
line = list(color= "black", widthh=0.5, dash="dot"),
name="Identity Line")
fig <- fig %>% layout(
title = paste(str_to_title(state),"lag", lead_n, "correlation=",
corr),
yaxis = list(title=paste("Normalized New Daily Cases",
lead_n, "days later")),
xaxis = list(title="Today's Norm New Confirmed Cases"))
fig
}
#state=toupper("massachusetts")
# states = toupper(state.name)[22:length(state.name)]
# window_num = 7
# lags = c(7, 14, 21, 30)
# for (state in states){
#   for (lag_day in lags){
#     p <- plot_lag(state, lag_day, window_num)
#     htmlwidgets::saveWidget(as_widget(p),
#                            paste(tolower(state),"_lag_",lag_day,".html",sep=""))
#   }
# }
state = "TEXAS"
lag_day = 30
window_num = 7
p <- plot_lag(state, lag_day, window_num) #function to plot - no need to change
htmlwidgets::saveWidget(as_widget(p),                          paste(tolower(state),"_lag_",lag_day,".html",sep=""))
state=toupper("pennsylvania")
#states = toupper(state.name)[22:length(state.name)]
window_num = 7
lags = c(7, 14, 21, 30)
#for (state in states){
for (lag_day in lags){
p <- plot_lag(state, lag_day, window_num)
htmlwidgets::saveWidget(as_widget(p),
paste(tolower(state),"_lag_",lag_day,".html",sep=""))
}
#}
# state = "TEXAS"
# lag_day = 30
# window_num = 7
# p <- plot_lag(state, lag_day, window_num) #function to plot - no need to change
#
# htmlwidgets::saveWidget(as_widget(p),                          paste(tolower(state),"_lag_",lag_day,".html",sep=""))
