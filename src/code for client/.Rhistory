days_diff = 13
# identify how much we want to separate this intervention text from last
# intervention text
space_decs = 30
# y position of highest text label
label_position_offset = 250
# y axis max height
y_axis_max = 500
# function to plog interactive time series - no need to change
plot_time_interact(state, window_num, days_diff, space_decs,
label_position_offset, y_axis_max)
# identify which individual state
state = "FLORIDA"
# identify the window(days) for moving averages
window_num = 7
# the next four variables are for aesthetic only
# changing these variables can lesson the problems of text overlapping
# if days_diff is too small, all the neighboring intervention texts will overlap
days_diff = 20
# identify how much we want to separate this intervention text from last
# intervention text
space_decs = 40
# y position of highest text label
label_position_offset = 150
# y axis max height
y_axis_max = 600
# function to plog interactive time series - no need to change
plot_time_interact(state, window_num, days_diff, space_decs,
label_position_offset, y_axis_max)
# identify which individual state
state = "FLORIDA"
# identify the window(days) for moving averages
window_num = 7
# the next four variables are for aesthetic only
# changing these variables can lesson the problems of text overlapping
# if days_diff is too small, all the neighboring intervention texts will overlap
days_diff = 20
# identify how much we want to separate this intervention text from last
# intervention text
space_decs = 40
# y position of highest text label
label_position_offset = 350
# y axis max height
y_axis_max = 600
# function to plog interactive time series - no need to change
plot_time_interact(state, window_num, days_diff, space_decs,
label_position_offset, y_axis_max)
# identify which individual state
state = "KENTUCKY"
# identify the window(days) for moving averages
window_num = 7
# the next four variables are for aesthetic only
# changing these variables can lesson the problems of text overlapping
# if days_diff is too small, all the neighboring intervention texts will overlap
days_diff = 20
# identify how much we want to separate this intervention text from last
# intervention text
space_decs = 40
# y position of highest text label
label_position_offset = 350
# y axis max height
y_axis_max = 600
# function to plog interactive time series - no need to change
plot_time_interact(state, window_num, days_diff, space_decs,
label_position_offset, y_axis_max)
# identify which individual state
state = "KENTUCKY"
# identify the window(days) for moving averages
window_num = 7
# the next four variables are for aesthetic only
# changing these variables can lesson the problems of text overlapping
# if days_diff is too small, all the neighboring intervention texts will overlap
days_diff = 20
# identify how much we want to separate this intervention text from last
# intervention text
space_decs = 40
# y position of highest text label
label_position_offset = 150
# y axis max height
y_axis_max = 300
# function to plog interactive time series - no need to change
plot_time_interact(state, window_num, days_diff, space_decs,
label_position_offset, y_axis_max)
# identify which individual state
state = "KENTUCKY"
# identify the window(days) for moving averages
window_num = 7
# the next four variables are for aesthetic only
# changing these variables can lesson the problems of text overlapping
# if days_diff is too small, all the neighboring intervention texts will overlap
days_diff = 20
# identify how much we want to separate this intervention text from last
# intervention text
space_decs = 40
# y position of highest text label
label_position_offset = 250
# y axis max height
y_axis_max = 300
# function to plog interactive time series - no need to change
plot_time_interact(state, window_num, days_diff, space_decs,
label_position_offset, y_axis_max)
# identify which individual state
state = "KENTUCKY"
# identify the window(days) for moving averages
window_num = 7
# the next four variables are for aesthetic only
# changing these variables can lesson the problems of text overlapping
# if days_diff is too small, all the neighboring intervention texts will overlap
days_diff = 10
# identify how much we want to separate this intervention text from last
# intervention text
space_decs = 30
# y position of highest text label
label_position_offset = 250
# y axis max height
y_axis_max = 300
# function to plog interactive time series - no need to change
plot_time_interact(state, window_num, days_diff, space_decs,
label_position_offset, y_axis_max)
# identify which individual state
state = "KENTUCKY"
# identify the window(days) for moving averages
window_num = 7
# the next four variables are for aesthetic only
# changing these variables can lesson the problems of text overlapping
# if days_diff is too small, all the neighboring intervention texts will overlap
days_diff = 15
# identify how much we want to separate this intervention text from last
# intervention text
space_decs = 35
# y position of highest text label
label_position_offset = 250
# y axis max height
y_axis_max = 300
# function to plog interactive time series - no need to change
plot_time_interact(state, window_num, days_diff, space_decs,
label_position_offset, y_axis_max)
# identify which individual state
state = "KENTUCKY"
# identify the window(days) for moving averages
window_num = 7
# the next four variables are for aesthetic only
# changing these variables can lesson the problems of text overlapping
# if days_diff is too small, all the neighboring intervention texts will overlap
days_diff = 15
# identify how much we want to separate this intervention text from last
# intervention text
space_decs = 30
# y position of highest text label
label_position_offset = 250
# y axis max height
y_axis_max = 300
# function to plog interactive time series - no need to change
plot_time_interact(state, window_num, days_diff, space_decs,
label_position_offset, y_axis_max)
# identify which individual state
state = "KENTUCKY"
# identify the window(days) for moving averages
window_num = 7
# the next four variables are for aesthetic only
# changing these variables can lesson the problems of text overlapping
# if days_diff is too small, all the neighboring intervention texts will overlap
days_diff = 15
# identify how much we want to separate this intervention text from last
# intervention text
space_decs = 30
# y position of highest text label
label_position_offset = 240
# y axis max height
y_axis_max = 400
# function to plog interactive time series - no need to change
plot_time_interact(state, window_num, days_diff, space_decs,
label_position_offset, y_axis_max)
# identify which individual state
state = "KENTUCKY"
# identify the window(days) for moving averages
window_num = 7
# the next four variables are for aesthetic only
# changing these variables can lesson the problems of text overlapping
# if days_diff is too small, all the neighboring intervention texts will overlap
days_diff = 15
# identify how much we want to separate this intervention text from last
# intervention text
space_decs = 30
# y position of highest text label
label_position_offset = 300
# y axis max height
y_axis_max = 400
# function to plog interactive time series - no need to change
plot_time_interact(state, window_num, days_diff, space_decs,
label_position_offset, y_axis_max)
# identify which individual state
state = "KENTUCKY"
# identify the window(days) for moving averages
window_num = 7
# the next four variables are for aesthetic only
# changing these variables can lesson the problems of text overlapping
# if days_diff is too small, all the neighboring intervention texts will overlap
days_diff = 13
# identify how much we want to separate this intervention text from last
# intervention text
space_decs = 30
# y position of highest text label
label_position_offset = 180
# y axis max height
y_axis_max = 300
# function to plog interactive time series - no need to change
plot_time_interact(state, window_num, days_diff, space_decs,
label_position_offset, y_axis_max)
plot_time_interact(state, window_num, days_diff, space_decs,
label_position_offset, y_axis_max)
# identify which individual state
state = "KENTUCKY"
# identify the window(days) for moving averages
window_num = 7
# the next four variables are for aesthetic only
# changing these variables can lesson the problems of text overlapping
# if days_diff is too small, all the neighboring intervention texts will overlap
days_diff = 13
# identify how much we want to separate this intervention text from last
# intervention text
space_decs = 30
# y position of highest text label
label_position_offset = 220
# y axis max height
y_axis_max = 300
# function to plog interactive time series - no need to change
plot_time_interact(state, window_num, days_diff, space_decs,
label_position_offset, y_axis_max)
plot_time_interact(state, window_num, days_diff, space_decs,
label_position_offset, y_axis_max)
# identify which individual state
state = "KENTUCKY"
# identify the window(days) for moving averages
window_num = 7
# the next four variables are for aesthetic only
# changing these variables can lesson the problems of text overlapping
# if days_diff is too small, all the neighboring intervention texts will overlap
days_diff = 13
# identify how much we want to separate this intervention text from last
# intervention text
space_decs = 30
# y position of highest text label
label_position_offset = 250
# y axis max height
y_axis_max = 300
# function to plog interactive time series - no need to change
plot_time_interact(state, window_num, days_diff, space_decs,
label_position_offset, y_axis_max)
plot_time_interact(state, window_num, days_diff, space_decs,
label_position_offset, y_axis_max)
# identify which individual state
state = "FLORIDA"
# identify the window(days) for moving averages
window_num = 7
# the next four variables are for aesthetic only
# changing these variables can lesson the problems of text overlapping
# if days_diff is too small, all the neighboring intervention texts will overlap
days_diff = 20
# identify how much we want to separate this intervention text from last
# intervention text
space_decs = 58
# y position of highest text label
label_position_offset = 350
# y axis max height
y_axis_max = 600
# function to plog interactive time series - no need to change
plot_time_interact(state, window_num, days_diff, space_decs,
label_position_offset, y_axis_max)
load(url("http://www.stat.cmu.edu/~pfreeman/HW_10_Q2.Rdata"))
load(url("http://www.stat.cmu.edu/~pfreeman/HW_10_Q2.Rdata"))
loan.dates
as.Date("2019/1/1")-as.Date("2019/1/1")
as.Date("2019/2/1")-as.Date("2019/1/1")
min(loan.dates)
max(loan.dates)
as.Date(loan.dates)
as.Date(sub("(..)$","20\\1",loan.dates),format="%m/%d/%Y")
a=as.Date(sub("(..)$","20\\1",loan.dates),format="%m/%d/%Y")
min(a)
max(a)
as.Date("2019/4/1")-as.Date("2019/1/1")
loan.dates[1980]
as.Date("2019/2/1")-as.Date("2019/1/1")
as.numeric(as.Date("2019/2/1")-as.Date("2019/1/1"))
as.numeric(as.Date("2019/2/1")-as.Date("2019/1/1"))+1
days_of_yr = as.numeric(as.Date("2019/4/1")-as.Date("2019/1/1"))+1
loan.ts = ts(loan.dates,start=c(2019,days_of_yr),frequency=365)
plot(loan.ts, ylab="Number of Passengers (in Thousands)")
days_of_yr = as.numeric(as.Date("2019/4/1")-as.Date("2019/1/1"))+1
loan.ts = ts(loan.dates,start=c(2019,days_of_yr),frequency=365)
table(loan.ts)
#plot(loan.ts, ylab="Number of Passengers (in Thousands)")
days_of_yr = as.numeric(as.Date("2019/4/1")-as.Date("2019/1/1"))+1
loan.ts = ts(table(loan.ts),start=c(2019,days_of_yr),frequency=365)
#plot(loan.ts, ylab="Number of Passengers (in Thousands)")
days_of_yr = as.numeric(as.Date("2019/4/1")-as.Date("2019/1/1"))+1
loan.ts = ts(table(loan.ts),start=c(2019,days_of_yr),frequency=365)
plot(loan.ts, ylab="Number of Passengers (in Thousands)")
loan.ts
table(loan.dates)
days_of_yr = as.numeric(as.Date("2019/4/1")-as.Date("2019/1/1"))+1
loan.ts = ts(table(loan.dates),start=c(2019,days_of_yr),frequency=365)
plot(loan.ts, ylab="Number of Objects Loaned")
sort(table(loan.dates))
lloan.ts
loan.ts
sort(loan.ts)
a = as.Date(sub("(..)$","20\\1",loan.dates), format='%m/%d/%Y')
a
table(sort(a))
sort(loan.ts)
table(sort(loan.ts))
loan.dates = as.Date(sub("(..)$","20\\1",loan.dates), format='%m/%d/%Y')
days_of_yr = as.numeric(as.Date("2019/4/1")-as.Date("2019/1/1"))+1
loan.ts = ts(sort(loan.dates),start=c(2019,days_of_yr),frequency=365)
plot(loan.ts, ylab="Number of Objects Loaned")
table(loan.dates)
loan.dates = as.Date(sub("(..)$","20\\1",loan.dates), format='%m/%d/%Y')
days_of_yr = as.numeric(as.Date("2019/4/1")-as.Date("2019/1/1"))+1
loan.ts = ts(table(loan.dates),start=c(2019,days_of_yr),frequency=365)
loan.dates = as.Date(sub("(..)$","20\\1",loan.dates), format='%m/%d/%Y')
days_of_yr = as.numeric(as.Date("2019/4/1")-as.Date("2019/1/1"))+1
loan.ts = ts(table(loan.dates),start=c(2019,days_of_yr),frequency=365)
load(url("http://www.stat.cmu.edu/~pfreeman/HW_10_Q2.Rdata"))
loan.dates = as.Date(sub("(..)$","20\\1",loan.dates), format='%m/%d/%Y')
days_of_yr = as.numeric(as.Date("2019/4/1")-as.Date("2019/1/1"))+1
loan.ts = ts(table(loan.dates),start=c(2019,days_of_yr),frequency=365)
plot(loan.ts, ylab="Number of Objects Loaned")
loan.ts
s = spectrum(air.ts,log=c("no"))
s = spectrum(loan.ts,log=c("no"))
s$spec
s$freq
max(s$freq)
max(s$spec)
which(max(s$spec))
which.max(s$spec)
s$freq[which.max(s$spec)]
s = spectrum(loan.ts,log=c("no"))
max(s$freq)/s$freq[which.max(s$spec)]
t = seq(0,5,by=0.05)
y = 15 + 2*sin(2*pi*t/1.5)
plot(t,y,typ="l",xlab="Date (in Years from Time Zero)",ylab="True Magnitude")
t
runif(10, min=0, max=5)
a = runif(n, min=0, max=5)
a = runif(5, min=0, max=5)
a
b = 15 + 2*sin(2*pi*a/1.5)
b
e = rnorm(5, 0, 0.2)
e
b+e
15 + 2*sin(2*pi*t/1.5) +e
f <- function(n){
t = runif(n, min=0, max=5)
epsilon = rnorm(n, 0, 0.2)
y = 15 + 2*sin(2*pi*t/1.5)
y = y+epsilon
return(mean(y))
}
f <- function(n){
t = runif(n, min=0, max=5)
epsilon = rnorm(n, 0, 0.2)
y = 15 + 2*sin(2*pi*t/1.5)
y = y+epsilon
return(mean(y))
}
k = 1000
n = 10
res_10 = rep(NA, k)
for (i in 1:k){
res_10[i] = f(5)
}
f <- function(n){
t = runif(n, min=0, max=5)
epsilon = rnorm(n, 0, 0.2)
y = 15 + 2*sin(2*pi*t/1.5)
y = y+epsilon
return(mean(y))
}
k = 1000
n = 10
res_10 = rep(NA, k)
for (i in 1:k){
res_10[i] = f(5)
}
res_10
f <- function(n){
t = runif(n, min=0, max=5)
epsilon = rnorm(n, 0, 0.2)
y = 15 + 2*sin(2*pi*t/1.5)
y = y+epsilon
return(mean(y))
}
k = 1000
n = 10
res_10 = rep(NA, k)
for (i in 1:k){
res_10[i] = f(5)
}
sd(res_10)
f <- function(n){
t = runif(n, min=0, max=5)
epsilon = rnorm(n, 0, 0.2)
y = 15 + 2*sin(2*pi*t/1.5)
y = y+epsilon
return(mean(y))
}
k = 1000
n = 10
res_10 = rep(NA, k)
for (i in 1:k){
res_10[i] = f(5)
}
sd(res_10)
n = 20
res_20 = rep(NA, k)
for (i in 1:k){
res_20[i] = f(5)
}
sd(res_20)
n = 40
res_40 = rep(NA, k)
for (i in 1:k){
res_40[i] = f(5)
}
sd(res_40)
res_20
f <- function(n){
t = runif(n, min=0, max=5)
epsilon = rnorm(n, 0, 0.2)
y = 15 + 2*sin(2*pi*t/1.5)
y = y+epsilon
return(y)
}
k = 1000
n = 10
res_10 = rep(NA, k)
for (i in 1:k){
res_10[i] = f(5)
}
sd(res_10)
n = 20
res_20 = rep(NA, k)
for (i in 1:k){
res_20[i] = f(5)
}
sd(res_20)
n = 40
res_40 = rep(NA, k)
for (i in 1:k){
res_40[i] = f(5)
}
sd(res_40)
k = 1000
n = 10
res_10 = rep(NA, k)
f <- function(n){
t = runif(n, min=0, max=5)
epsilon = rnorm(n, 0, 0.2)
y = 15 + 2*sin(2*pi*t/1.5)
y = y+epsilon
return(mean(y))
}
k = 1000
n = 10
res_10 = rep(NA, k)
for (i in 1:k){
res_10[i] = f(n)
}
sd(res_10)
n = 20
res_20 = rep(NA, k)
for (i in 1:k){
res_20[i] = f(n)
}
sd(res_20)
n = 40
res_40 = rep(NA, k)
for (i in 1:k){
res_40[i] = f(n)
}
sd(res_40)
f <- function(n){
t = runif(n, min=0, max=5)
epsilon = rnorm(n, 0, 0.2)
y = 15 + 2*sin(2*pi*t/1.5)
y = y+epsilon
return(mean(y))
}
k = 1000
n = 10
res_10 = rep(NA, k)
for (i in 1:k){
res_10[i] = f(n)
}
paste("sample standard deviation for n=10", sd(res_10))
n = 20
res_20 = rep(NA, k)
for (i in 1:k){
res_20[i] = f(n)
}
paste("sample standard deviation for n=20", sd(res_20))
n = 40
res_40 = rep(NA, k)
for (i in 1:k){
res_40[i] = f(n)
}
paste("sample standard deviation for n=40", sd(res_40))
dt <- read_csv("SN_m_tot_V2.0.csv")
