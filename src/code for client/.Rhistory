new_col = c()
check = substr(x, nchar(x), nchar(x))
if (is.na(check)){
new_col <- append(new_col, x)
}else if(check %in% c("M", "R", "I")){
new_col <- append(new_col, "Implemented")
} else if (check == "E"){
new_col <- append(new_col, "Eased")
} else if (check == "L"){
new_col <- append(new_col, "Lifted")
} else {
new_col <- append(new_col, NA)
}
}
data$lag_catg <- sapply(data$EVENT_CATG_S, FUN=lag_catg)
# # text color bins
# bins <- c(-Inf,0,0.25,0.75,1.20,1.55,1.85,2.10,2.35,2.70,3.05,3.40,3.75,
#           4.00, 5.00)
# data$color_scale <- cut(data$SCORE, breaks=bins)
# color_v <- c("#ffffff","#fdfec0","#ffd799","#ffb078","#fc8861","#f2615d",
#              "#d8466c","#87377a","#942c81","#721f82","#51127c", "#2d1160",
#              "#ffd3d1", "#100c2e")
#
# color_event_v <- c("#ff0000","#e08c75","#f2cec4","#f2cf05","#ede02b",
#                       "#ada63e","#b3b827","#144d6b", "#07a3f5",
#                       "#81b7d4", "#a3bcc9","#cfeeff", "#9905f5","#c99fe3",
#                       "#480c6e", "#715b80", "#d324f2", "#ffffff")
# names(color_event_v) = levels(as.factor(data$EVENT_CATG_S))
# names(color_v) = levels(data$color_scale)
#
# data$is_weekend <- is.weekend(chron(as.numeric(data$DATE)))
state="CALIFORNIA"
lead_n=28
state_data <- data[data$STATE==state,]
state_data$n_lead <- lead(state_data$NEWCD_NORM_500, n=lead_n)
View(state_data)
state_data$NEWCD_NORM_500
a=c(1,2,3,4,5)
lead(a, 2)
length(a)
i = 5
state_data[5,]
state_data[5,3]
today+7
state_data[5,3]+7
after=state_data[5,3]+7
state_data[state_data$DATE==after,]
state_data[,state_data$DATE==after]
state_data[,state_data$DATE==after,]
state_data[,as.character(state_data$DATE)==as.character(after),]
state_data[as.character(state_data$DATE)==as.character(after),]
as.character(state_data$DATE)
as.character(after)
as.character(as.Date(after))
as.character(as.Date(after, format="%Y-%m-%d"))
after
after[1]
typeof(after)
after[1,1]
state_data[as.character(state_data$DATE)==as.character(after)[1,1],]
state_data[as.character(state_data$DATE)==as.character(after[1,1]),]
a=state_data[as.character(state_data$DATE)==as.character(after[1,1]),]
a$NEWCD_NORM_500
colnames(state_data)
a$STATE
plot_lag <- function(state, lead_n){
state_data <- data[data$STATE==state,]
identity_x <- seq(0, max(na.omit(state_data$NEWCD_NORM_500)), by=1)
identity_y <- identity_x
corr <- round(acf(na.omit(state_data$NEWCD_NORM_500),
lag.max=lead_n,
plot=FALSE)[lead_n]$acf[1], digits=2)
state_data$n_lead = rep(NA, length(state_data))
for (i in 1:(length(state_data)-lead_n)){
today = state_data[i, 3]
n_day_after = today+lead_n
inst = state_data[as.character(state_data$DATE)==as.character(after[1,1]),]
state_data$n_lead[i] = inst$NEWCD_NORM_500
}
#state_data$n_lead <- lead(state_data$NEWCD_NORM_500, n=lead_n)
state_data_cut <- state_data[!is.na(state_data$lag_catg),]
plot2 <- ggplot(data=state_data_cut)+
geom_point(aes(x=NEWCD_NORM_500, y=n_lead,
col=as.factor(lag_catg),
text=paste("Date of x-axis:", DATE,
"\nDate of y-axis:", DATE+lead_n,
"\nEvent:", event)), size=2)+
scale_color_manual(values=c("#f2615d", "#2d1160","#ffd799"),
name="Event Category",
labels=c("Eased", "Implemented", "Lifted", ""))+
geom_line(data=data.frame(identity_x, identity_y),
aes(x=identity_x, y=identity_y), linetype="dotted", size=1)+
labs(title=paste(str_to_title(state),"lag", lead_n, "correlation=", corr),
x="Today's Norm New Confirmed Cases",
y=paste("Normalized New Daily Cases", lead_n, "days later"))+
theme_bw()
ggplotly(plot2, tooltip="text")
}
state = "WISCONSIN"
lag_day = 14
plot_lag(state, lag_day) #function to plot - no need to change
state = "CALIFORNIA"
state_data <- data[data$STATE==state,]
state_data$n_lead = rep(NA, length(state_data))
library(tidyverse)
library(ggplot2)
library(readr)
library(ggseas)
library(chron)
library(plotly)
data <- read_csv("covid.com.csv") %>%
select(c(-1))
# change event code to description
group_event_catg <- function(x){
new_col = c()
check = substr(x, nchar(x), nchar(x))
if (is.na(check)){
new_col <- append(new_col, x)
} else if(check == "M"){
new_col <- append(new_col, "Mandatory")
} else if (check == "R"){
new_col <- append(new_col, "Re-Issued")
} else if (check == "E"){
new_col <- append(new_col, "Eased")
} else if (check == "L"){
new_col <- append(new_col, "Lifted ")
}
}
data$event_MELR <- sapply(data$EVENT_CATG_S, FUN=group_event_catg)
# category num
big_catg <- function(x){
new_col = c()
if (is.na(x)){
new_col <- append(new_col, x)
}
else if(x=="15M"){
new_col <- append(new_col, "Face Covering")
} else if(grepl("2", x)){
new_col <- append(new_col, "Business Restrictions")
} else if(grepl("3", x)){
new_col <- append(new_col, "Indoor Gathering Restrictions")
} else if(grepl("4", x)){
new_col <- append(new_col, "Restaurant/Bar Restrictions")
} else{
new_col <- append(new_col, "Stay at Home Orders")
}
}
data$big_cat <- sapply(data$EVENT_CATG_S, FUN=big_catg)
data$event <- paste(data$big_cat, "\n", data$event_MELR)
# Implementation, Lifting, Ease
lag_catg <- function(x){
new_col = c()
check = substr(x, nchar(x), nchar(x))
if (is.na(check)){
new_col <- append(new_col, x)
}else if(check %in% c("M", "R", "I")){
new_col <- append(new_col, "Implemented")
} else if (check == "E"){
new_col <- append(new_col, "Eased")
} else if (check == "L"){
new_col <- append(new_col, "Lifted")
} else {
new_col <- append(new_col, NA)
}
}
data$lag_catg <- sapply(data$EVENT_CATG_S, FUN=lag_catg)
# # text color bins
# bins <- c(-Inf,0,0.25,0.75,1.20,1.55,1.85,2.10,2.35,2.70,3.05,3.40,3.75,
#           4.00, 5.00)
# data$color_scale <- cut(data$SCORE, breaks=bins)
# color_v <- c("#ffffff","#fdfec0","#ffd799","#ffb078","#fc8861","#f2615d",
#              "#d8466c","#87377a","#942c81","#721f82","#51127c", "#2d1160",
#              "#ffd3d1", "#100c2e")
#
# color_event_v <- c("#ff0000","#e08c75","#f2cec4","#f2cf05","#ede02b",
#                       "#ada63e","#b3b827","#144d6b", "#07a3f5",
#                       "#81b7d4", "#a3bcc9","#cfeeff", "#9905f5","#c99fe3",
#                       "#480c6e", "#715b80", "#d324f2", "#ffffff")
# names(color_event_v) = levels(as.factor(data$EVENT_CATG_S))
# names(color_v) = levels(data$color_scale)
#
# data$is_weekend <- is.weekend(chron(as.numeric(data$DATE)))
plot_lag <- function(state, lead_n){
state_data <- data[data$STATE==state,]
identity_x <- seq(0, max(na.omit(state_data$NEWCD_NORM_500)), by=1)
identity_y <- identity_x
corr <- round(acf(na.omit(state_data$NEWCD_NORM_500),
lag.max=lead_n,
plot=FALSE)[lead_n]$acf[1], digits=2)
state_data$n_lead = rep(1, length(state_data))
for (i in 1:(length(state_data)-lead_n)){
today = state_data[i, 3]
n_day_after = today+lead_n
inst = state_data[as.character(state_data$DATE)==as.character(after[1,1]),]
state_data$n_lead[i] = inst$NEWCD_NORM_500
}
#state_data$n_lead <- lead(state_data$NEWCD_NORM_500, n=lead_n)
state_data_cut <- state_data[!is.na(state_data$lag_catg),]
plot2 <- ggplot(data=state_data_cut)+
geom_point(aes(x=NEWCD_NORM_500, y=n_lead,
col=as.factor(lag_catg),
text=paste("Date of x-axis:", DATE,
"\nDate of y-axis:", DATE+lead_n,
"\nEvent:", event)), size=2)+
scale_color_manual(values=c("#f2615d", "#2d1160","#ffd799"),
name="Event Category",
labels=c("Eased", "Implemented", "Lifted", ""))+
geom_line(data=data.frame(identity_x, identity_y),
aes(x=identity_x, y=identity_y), linetype="dotted", size=1)+
labs(title=paste(str_to_title(state),"lag", lead_n, "correlation=", corr),
x="Today's Norm New Confirmed Cases",
y=paste("Normalized New Daily Cases", lead_n, "days later"))+
theme_bw()
ggplotly(plot2, tooltip="text")
}
state = "WISCONSIN"
lag_day = 14
plot_lag(state, lag_day) #function to plot - no need to change
library(tidyverse)
library(ggplot2)
library(readr)
library(ggseas)
library(chron)
library(plotly)
data <- read_csv("covid.com.csv") %>%
select(c(-1))
# change event code to description
group_event_catg <- function(x){
new_col = c()
check = substr(x, nchar(x), nchar(x))
if (is.na(check)){
new_col <- append(new_col, x)
} else if(check == "M"){
new_col <- append(new_col, "Mandatory")
} else if (check == "R"){
new_col <- append(new_col, "Re-Issued")
} else if (check == "E"){
new_col <- append(new_col, "Eased")
} else if (check == "L"){
new_col <- append(new_col, "Lifted ")
}
}
data$event_MELR <- sapply(data$EVENT_CATG_S, FUN=group_event_catg)
# category num
big_catg <- function(x){
new_col = c()
if (is.na(x)){
new_col <- append(new_col, x)
}
else if(x=="15M"){
new_col <- append(new_col, "Face Covering")
} else if(grepl("2", x)){
new_col <- append(new_col, "Business Restrictions")
} else if(grepl("3", x)){
new_col <- append(new_col, "Indoor Gathering Restrictions")
} else if(grepl("4", x)){
new_col <- append(new_col, "Restaurant/Bar Restrictions")
} else{
new_col <- append(new_col, "Stay at Home Orders")
}
}
data$big_cat <- sapply(data$EVENT_CATG_S, FUN=big_catg)
data$event <- paste(data$big_cat, "\n", data$event_MELR)
# Implementation, Lifting, Ease
lag_catg <- function(x){
new_col = c()
check = substr(x, nchar(x), nchar(x))
if (is.na(check)){
new_col <- append(new_col, x)
}else if(check %in% c("M", "R", "I")){
new_col <- append(new_col, "Implemented")
} else if (check == "E"){
new_col <- append(new_col, "Eased")
} else if (check == "L"){
new_col <- append(new_col, "Lifted")
} else {
new_col <- append(new_col, NA)
}
}
data$lag_catg <- sapply(data$EVENT_CATG_S, FUN=lag_catg)
# # text color bins
# bins <- c(-Inf,0,0.25,0.75,1.20,1.55,1.85,2.10,2.35,2.70,3.05,3.40,3.75,
#           4.00, 5.00)
# data$color_scale <- cut(data$SCORE, breaks=bins)
# color_v <- c("#ffffff","#fdfec0","#ffd799","#ffb078","#fc8861","#f2615d",
#              "#d8466c","#87377a","#942c81","#721f82","#51127c", "#2d1160",
#              "#ffd3d1", "#100c2e")
#
# color_event_v <- c("#ff0000","#e08c75","#f2cec4","#f2cf05","#ede02b",
#                       "#ada63e","#b3b827","#144d6b", "#07a3f5",
#                       "#81b7d4", "#a3bcc9","#cfeeff", "#9905f5","#c99fe3",
#                       "#480c6e", "#715b80", "#d324f2", "#ffffff")
# names(color_event_v) = levels(as.factor(data$EVENT_CATG_S))
# names(color_v) = levels(data$color_scale)
#
# data$is_weekend <- is.weekend(chron(as.numeric(data$DATE)))
state="CALIFORNIA"
state_data <- data[data$STATE==state,]
rep(NA, length(state_data))
plot_lag <- function(state, lead_n){
state_data <- data[data$STATE==state,]
identity_x <- seq(0, max(na.omit(state_data$NEWCD_NORM_500)), by=1)
identity_y <- identity_x
corr <- round(acf(na.omit(state_data$NEWCD_NORM_500),
lag.max=lead_n,
plot=FALSE)[lead_n]$acf[1], digits=2)
state_data$n_lead = rep(NA, nrows(state_data))
for (i in 1:(nrows(state_data)-lead_n)){
today = state_data[i, 3]
n_day_after = today+lead_n
inst = state_data[as.character(state_data$DATE)==as.character(after[1,1]),]
state_data$n_lead[i] = inst$NEWCD_NORM_500
}
#state_data$n_lead <- lead(state_data$NEWCD_NORM_500, n=lead_n)
state_data_cut <- state_data[!is.na(state_data$lag_catg),]
plot2 <- ggplot(data=state_data_cut)+
geom_point(aes(x=NEWCD_NORM_500, y=n_lead,
col=as.factor(lag_catg),
text=paste("Date of x-axis:", DATE,
"\nDate of y-axis:", DATE+lead_n,
"\nEvent:", event)), size=2)+
scale_color_manual(values=c("#f2615d", "#2d1160","#ffd799"),
name="Event Category",
labels=c("Eased", "Implemented", "Lifted", ""))+
geom_line(data=data.frame(identity_x, identity_y),
aes(x=identity_x, y=identity_y), linetype="dotted", size=1)+
labs(title=paste(str_to_title(state),"lag", lead_n, "correlation=", corr),
x="Today's Norm New Confirmed Cases",
y=paste("Normalized New Daily Cases", lead_n, "days later"))+
theme_bw()
ggplotly(plot2, tooltip="text")
}
state_data <- data[data$STATE==state,]
state_data$n_lead = rep(NA, nrows(state_data))
plot_lag <- function(state, lead_n){
state_data <- data[data$STATE==state,]
identity_x <- seq(0, max(na.omit(state_data$NEWCD_NORM_500)), by=1)
identity_y <- identity_x
corr <- round(acf(na.omit(state_data$NEWCD_NORM_500),
lag.max=lead_n,
plot=FALSE)[lead_n]$acf[1], digits=2)
state_data$n_lead = rep(NA, nrow(state_data))
for (i in 1:(nrow(state_data)-lead_n)){
today = state_data[i, 3]
n_day_after = today+lead_n
inst = state_data[as.character(state_data$DATE)==as.character(after[1,1]),]
state_data$n_lead[i] = inst$NEWCD_NORM_500
}
#state_data$n_lead <- lead(state_data$NEWCD_NORM_500, n=lead_n)
state_data_cut <- state_data[!is.na(state_data$lag_catg),]
plot2 <- ggplot(data=state_data_cut)+
geom_point(aes(x=NEWCD_NORM_500, y=n_lead,
col=as.factor(lag_catg),
text=paste("Date of x-axis:", DATE,
"\nDate of y-axis:", DATE+lead_n,
"\nEvent:", event)), size=2)+
scale_color_manual(values=c("#f2615d", "#2d1160","#ffd799"),
name="Event Category",
labels=c("Eased", "Implemented", "Lifted", ""))+
geom_line(data=data.frame(identity_x, identity_y),
aes(x=identity_x, y=identity_y), linetype="dotted", size=1)+
labs(title=paste(str_to_title(state),"lag", lead_n, "correlation=", corr),
x="Today's Norm New Confirmed Cases",
y=paste("Normalized New Daily Cases", lead_n, "days later"))+
theme_bw()
ggplotly(plot2, tooltip="text")
}
state_data <- data[data$STATE==state,]
state_data
state_data$n_lead = rep(NA, nrow(state_data))
state_data$n_lead
state_data$n_lead[1]
plot_lag <- function(state, lead_n){
state_data <- data[data$STATE==state,]
identity_x <- seq(0, max(na.omit(state_data$NEWCD_NORM_500)), by=1)
identity_y <- identity_x
corr <- round(acf(na.omit(state_data$NEWCD_NORM_500),
lag.max=lead_n,
plot=FALSE)[lead_n]$acf[1], digits=2)
state_data$n_lead = rep(NA, nrow(state_data))
for (i in 1:(nrow(state_data)-lead_n)){
today = state_data[i, 3]
n_day_after = today+lead_n
inst = state_data[as.character(state_data$DATE)==as.character(after[1,1]),]
state_data$n_lead[i] = inst$NEWCD_NORM_500
}
#state_data$n_lead <- lead(state_data$NEWCD_NORM_500, n=lead_n)
state_data_cut <- state_data[!is.na(state_data$lag_catg),]
plot2 <- ggplot(data=state_data_cut)+
geom_point(aes(x=NEWCD_NORM_500, y=n_lead,
col=as.factor(lag_catg),
text=paste("Date of x-axis:", DATE,
"\nDate of y-axis:", DATE+lead_n,
"\nEvent:", event)), size=2)+
scale_color_manual(values=c("#f2615d", "#2d1160","#ffd799"),
name="Event Category",
labels=c("Eased", "Implemented", "Lifted", ""))+
geom_line(data=data.frame(identity_x, identity_y),
aes(x=identity_x, y=identity_y), linetype="dotted", size=1)+
labs(title=paste(str_to_title(state),"lag", lead_n, "correlation=", corr),
x="Today's Norm New Confirmed Cases",
y=paste("Normalized New Daily Cases", lead_n, "days later"))+
theme_bw()
ggplotly(plot2, tooltip="text")
}
state = "WISCONSIN"
lag_day = 14
plot_lag(state, lag_day) #function to plot - no need to change
plot_lag <- function(state, lead_n){
state_data <- data[data$STATE==state,]
identity_x <- seq(0, max(na.omit(state_data$NEWCD_NORM_500)), by=1)
identity_y <- identity_x
corr <- round(acf(na.omit(state_data$NEWCD_NORM_500),
lag.max=lead_n,
plot=FALSE)[lead_n]$acf[1], digits=2)
state_data$n_lead = rep(NA, nrow(state_data))
for (i in 1:(nrow(state_data)-lead_n)){
today = state_data[i, 3]
n_day_after = today+lead_n
inst = state_data[as.character(state_data$DATE)==as.character(n_day_after[1,1]),]
state_data$n_lead[i] = inst$NEWCD_NORM_500
}
#state_data$n_lead <- lead(state_data$NEWCD_NORM_500, n=lead_n)
state_data_cut <- state_data[!is.na(state_data$lag_catg),]
plot2 <- ggplot(data=state_data_cut)+
geom_point(aes(x=NEWCD_NORM_500, y=n_lead,
col=as.factor(lag_catg),
text=paste("Date of x-axis:", DATE,
"\nDate of y-axis:", DATE+lead_n,
"\nEvent:", event)), size=2)+
scale_color_manual(values=c("#f2615d", "#2d1160","#ffd799"),
name="Event Category",
labels=c("Eased", "Implemented", "Lifted", ""))+
geom_line(data=data.frame(identity_x, identity_y),
aes(x=identity_x, y=identity_y), linetype="dotted", size=1)+
labs(title=paste(str_to_title(state),"lag", lead_n, "correlation=", corr),
x="Today's Norm New Confirmed Cases",
y=paste("Normalized New Daily Cases", lead_n, "days later"))+
theme_bw()
ggplotly(plot2, tooltip="text")
}
state = "WISCONSIN"
lag_day = 14
plot_lag(state, lag_day) #function to plot - no need to change
state = "CALIFORNIA"
lag_day = 28
plot_lag(state, lag_day) #function to plot - no need to change
library(tidyverse)
library(ggplot2)
library(readr)
library(ggseas)
library(chron)
library(plotly)
data <- read_csv("covid.com.csv") %>%
select(c(-1))
aggregate(state_data$DATE)
# change event code to description
group_event_catg <- function(x){
new_col = c()
check = substr(x, nchar(x), nchar(x))
if (is.na(check)){
new_col <- append(new_col, x)
} else if(check == "M"){
new_col <- append(new_col, "Mandatory")
} else if (check == "R"){
new_col <- append(new_col, "Re-Issued")
} else if (check == "E"){
new_col <- append(new_col, "Eased")
} else if (check == "L"){
new_col <- append(new_col, "Lifted ")
}
}
data$event_MELR <- sapply(data$EVENT_CATG_S, FUN=group_event_catg)
# category num
big_catg <- function(x){
new_col = c()
if (is.na(x)){
new_col <- append(new_col, x)
}
else if(x=="15M"){
new_col <- append(new_col, "Face Covering")
} else if(grepl("2", x)){
new_col <- append(new_col, "Business Restrictions")
} else if(grepl("3", x)){
new_col <- append(new_col, "Indoor Gathering Restrictions")
} else if(grepl("4", x)){
new_col <- append(new_col, "Restaurant/Bar Restrictions")
} else{
new_col <- append(new_col, "Stay at Home Orders")
}
}
data$big_cat <- sapply(data$EVENT_CATG_S, FUN=big_catg)
data$event <- paste(data$big_cat, data$event_MELR)
# Implementation, Lifting, Ease
lag_catg <- function(x){
new_col = c()
check = substr(x, nchar(x), nchar(x))
if (is.na(check)){
new_col <- append(new_col, x)
}else if(check %in% c("M", "R", "I")){
new_col <- append(new_col, "Implemented")
} else if (check == "E"){
new_col <- append(new_col, "Eased")
} else if (check == "L"){
new_col <- append(new_col, "Lifted")
} else {
new_col <- append(new_col, NA)
}
}
data$lag_catg <- sapply(data$EVENT_CATG_S, FUN=lag_catg)
View(data)
View(data)
