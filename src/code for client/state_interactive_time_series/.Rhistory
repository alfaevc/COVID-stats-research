check = substr(x, nchar(x), nchar(x))
if (is.na(check)){
new_col <- append(new_col, x)
}else if(check %in% c("M", "R", "I")){
new_col <- append(new_col, "Implemented")
} else if (check == "E"){
new_col <- append(new_col, "Eased")
} else if (check == "L"){
new_col <- append(new_col, "Lifted")
} else {
new_col <- append(new_col, NA)
}
}
data$lag_catg <- sapply(data$EVENT_CATG_S, FUN=lag_catg)
plot_lag <- function(state, lead_n){
state_data <- data[data$STATE==state,]
identity_x <- seq(0, max(na.omit(state_data$NEWCD_NORM_500)), by=1)
identity_y <- identity_x
corr <- round(acf(na.omit(state_data$NEWCD_NORM_500),
lag.max=lead_n,
plot=FALSE)[lead_n]$acf[1], digits=2)
state_data$n_lead = rep(NA, nrow(state_data))
for (i in 1:(nrow(state_data)-lead_n)){
today = state_data[i, 3]
n_day_after = today+lead_n
inst = state_data[as.character(state_data$DATE)==as.character(n_day_after[1,1]),]
state_data$n_lead[i] = inst$NEWCD_NORM_500
}
state_data_cut <- state_data[!is.na(state_data$lag_catg),]
plot2 <- ggplot(data=state_data_cut)+
geom_point(aes(x=NEWCD_NORM_500, y=n_lead,
col=as.factor(lag_catg),
text=paste("Date of x-axis:", DATE,
"\nDate of y-axis:", DATE+lead_n,
"\nEvent:", event)), size=2)+
scale_color_manual(values=c("#f2615d", "#2d1160","#ffd799","#d9d9d9"),
name="Event Category")+
# scale_color_manual(values=c("#f2615d", "#2d1160","#ffd799"),
#                    name="Event Category",
#                     labels=c("Eased", "Implemented", "Lifted", ""))+
geom_line(data=data.frame(identity_x, identity_y),
aes(x=identity_x, y=identity_y), linetype="dotted", size=1)+
labs(title=paste(str_to_title(state),"lag", lead_n, "correlation=", corr),
x="Today's Norm New Confirmed Cases",
y=paste("Normalized New Daily Cases", lead_n, "days later"))+
theme_bw()
ggplotly(plot2, tooltip="text")
}
state = "CALIFORNIA"
lag_day = 28
plot_lag(state, lag_day) #function to plot - no need to change
table(data$EVENT_CATG_S)
library(tidyverse)
library(ggplot2)
library(readr)
library(ggseas)
library(chron)
library(plotly)
data <- read_csv("covid.com.csv") %>%
select(c(-1))
# group event categories into easing/lifting and imposing
group_event_catg <- function(x){
new_col = c()
check = substr(x, nchar(x), nchar(x))
if(check %in% c("M", "R", "3")){
new_col <- append(new_col, "Mandatory/Recommended")
} else if (check %in% c("E", "L")){
new_col <- append(new_col, "Ease/Lifting")
} else {
new_col <- append(new_col, "")
}
}
data$event_MELR <- sapply(data$EVENT_CATG, FUN=group_event_catg)
library(tidyverse)
library(ggplot2)
library(readr)
library(ggseas)
library(chron)
library(plotly)
data <- read_csv("covid.com.csv") %>%
select(c(-1))
# change event code to description
group_event_catg <- function(x){
new_col = c()
check = substr(x, nchar(x), nchar(x))
if (is.na(check)){
new_col <- append(new_col, x)
} else if(check == "M"){
new_col <- append(new_col, "Mandatory")
} else if (check == "R"){
new_col <- append(new_col, "Re-Issued")
} else if (check == "E"){
new_col <- append(new_col, "Eased")
} else if (check == "L"){
new_col <- append(new_col, "Lifted ")
}
}
data$event_MELR <- sapply(data$EVENT_CATG_S, FUN=group_event_catg)
# category num
big_catg <- function(x){
new_col = c()
if (is.na(x)){
new_col <- append(new_col, x)
}
else if(x=="15M"){
new_col <- append(new_col, "Face Covering")
} else if(grepl("2", x)){
new_col <- append(new_col, "Business Restrictions")
} else if(grepl("3", x)){
new_col <- append(new_col, "Indoor Gathering Restrictions")
} else if(grepl("4", x)){
new_col <- append(new_col, "Restaurant/Bar Restrictions")
} else{
new_col <- append(new_col, "Stay at Home Orders")
}
}
data$big_cat <- sapply(data$EVENT_CATG_S, FUN=big_catg)
data$event <- paste(data$big_cat, "\n", data$event_MELR)
# Implementation, Lifting, Ease
lag_catg <- function(x){
new_col = c()
check = substr(x, nchar(x), nchar(x))
if (is.na(check)){
new_col <- append(new_col, x)
}else if(check %in% c("M", "R", "I")){
new_col <- append(new_col, "Implemented")
} else if (check == "E"){
new_col <- append(new_col, "Eased")
} else if (check == "L"){
new_col <- append(new_col, "Lifted")
} else {
new_col <- append(new_col, "No Event")
}
}
data$lag_catg <- sapply(data$EVENT_CATG_S, FUN=lag_catg)
plot_lag <- function(state, lead_n){
state_data <- data[data$STATE==state,]
identity_x <- seq(0, max(na.omit(state_data$NEWCD_NORM_500)), by=1)
identity_y <- identity_x
corr <- round(acf(na.omit(state_data$NEWCD_NORM_500),
lag.max=lead_n,
plot=FALSE)[lead_n]$acf[1], digits=2)
state_data$n_lead = rep(NA, nrow(state_data))
for (i in 1:(nrow(state_data)-lead_n)){
today = state_data[i, 3]
n_day_after = today+lead_n
inst = state_data[as.character(state_data$DATE)==as.character(n_day_after[1,1]),]
state_data$n_lead[i] = inst$NEWCD_NORM_500
}
state_data_cut <- state_data[!is.na(state_data$lag_catg),]
plot2 <- ggplot(data=state_data_cut)+
geom_point(aes(x=NEWCD_NORM_500, y=n_lead,
col=as.factor(lag_catg),
text=paste("Date of x-axis:", DATE,
"\nDate of y-axis:", DATE+lead_n,
"\nEvent:", event)), size=2)+
scale_color_manual(values=c("#f2615d", "#2d1160","#ffd799","#d9d9d9"),
name="Event Category")+
# scale_color_manual(values=c("#f2615d", "#2d1160","#ffd799"),
#                    name="Event Category",
#                     labels=c("Eased", "Implemented", "Lifted", ""))+
geom_line(data=data.frame(identity_x, identity_y),
aes(x=identity_x, y=identity_y), linetype="dotted", size=1)+
labs(title=paste(str_to_title(state),"lag", lead_n, "correlation=", corr),
x="Today's Norm New Confirmed Cases",
y=paste("Normalized New Daily Cases", lead_n, "days later"))+
theme_bw()
ggplotly(plot2, tooltip="text")
}
state = "CALIFORNIA"
lag_day = 28
plot_lag(state, lag_day) #function to plot - no need to change
View(data)
library(tidyverse)
library(ggplot2)
library(readr)
library(ggseas)
library(chron)
library(plotly)
data <- read_csv("covid.com.csv") %>%
select(c(-1))
# change event code to description
group_event_catg <- function(x){
new_col = c()
check = substr(x, nchar(x), nchar(x))
if (is.na(check)){
new_col <- append(new_col, x)
} else if(check == "M"){
new_col <- append(new_col, "Mandatory")
} else if (check == "R"){
new_col <- append(new_col, "Re-Issued")
} else if (check == "E"){
new_col <- append(new_col, "Eased")
} else if (check == "L"){
new_col <- append(new_col, "Lifted ")
}
}
data$event_MELR <- sapply(data$EVENT_CATG_S, FUN=group_event_catg)
# category num
big_catg <- function(x){
new_col = c()
if (is.na(x)){
new_col <- append(new_col, x)
}
else if(x=="15M"){
new_col <- append(new_col, "Face Covering")
} else if(grepl("2", x)){
new_col <- append(new_col, "Business Restrictions")
} else if(grepl("3", x)){
new_col <- append(new_col, "Indoor Gathering Restrictions")
} else if(grepl("4", x)){
new_col <- append(new_col, "Restaurant/Bar Restrictions")
} else{
new_col <- append(new_col, "Stay at Home Orders")
}
}
data$big_cat <- sapply(data$EVENT_CATG_S, FUN=big_catg)
data$event <- paste(data$big_cat, "\n", data$event_MELR)
# Implementation, Lifting, Ease
lag_catg <- function(x){
new_col = c()
check = substr(x, nchar(x), nchar(x))
if (is.na(check)){
new_col <- append(new_col, "No Event")
}else if(check %in% c("M", "R", "I")){
new_col <- append(new_col, "Implemented")
} else if (check == "E"){
new_col <- append(new_col, "Eased")
} else if (check == "L"){
new_col <- append(new_col, "Lifted")
} else {
new_col <- append(new_col, "No Event")
}
}
data$lag_catg <- sapply(data$EVENT_CATG_S, FUN=lag_catg)
plot_lag <- function(state, lead_n){
state_data <- data[data$STATE==state,]
identity_x <- seq(0, max(na.omit(state_data$NEWCD_NORM_500)), by=1)
identity_y <- identity_x
corr <- round(acf(na.omit(state_data$NEWCD_NORM_500),
lag.max=lead_n,
plot=FALSE)[lead_n]$acf[1], digits=2)
state_data$n_lead = rep(NA, nrow(state_data))
for (i in 1:(nrow(state_data)-lead_n)){
today = state_data[i, 3]
n_day_after = today+lead_n
inst = state_data[as.character(state_data$DATE)==as.character(n_day_after[1,1]),]
state_data$n_lead[i] = inst$NEWCD_NORM_500
}
state_data_cut <- state_data[!is.na(state_data$lag_catg),]
plot2 <- ggplot(data=state_data_cut)+
geom_point(aes(x=NEWCD_NORM_500, y=n_lead,
col=as.factor(lag_catg),
text=paste("Date of x-axis:", DATE,
"\nDate of y-axis:", DATE+lead_n,
"\nEvent:", event)), size=2)+
scale_color_manual(values=c("#f2615d", "#2d1160","#ffd799","#d9d9d9"),
name="Event Category")+
# scale_color_manual(values=c("#f2615d", "#2d1160","#ffd799"),
#                    name="Event Category",
#                     labels=c("Eased", "Implemented", "Lifted", ""))+
geom_line(data=data.frame(identity_x, identity_y),
aes(x=identity_x, y=identity_y), linetype="dotted", size=1)+
labs(title=paste(str_to_title(state),"lag", lead_n, "correlation=", corr),
x="Today's Norm New Confirmed Cases",
y=paste("Normalized New Daily Cases", lead_n, "days later"))+
theme_bw()
ggplotly(plot2, tooltip="text")
}
state = "CALIFORNIA"
lag_day = 28
plot_lag(state, lag_day) #function to plot - no need to change
state = "FLORIDA"
lag_day = 28
plot_lag(state, lag_day) #function to plot - no need to change
state = "WASHINGTON"
lag_day = 28
plot_lag(state, lag_day) #function to plot - no need to change
state = "PENNSYLVANIA"
lag_day = 28
plot_lag(state, lag_day) #function to plot - no need to change
state = "WISCONSIN"
lag_day = 28
plot_lag(state, lag_day) #function to plot - no need to change
state = "TEXAS"
lag_day = 28
plot_lag(state, lag_day) #function to plot - no need to change
state = "WASHINGTON"
lag_day = 28
plot_lag(state, lag_day) #function to plot - no need to change
plot_lag(state, lag_day)
plot_lag(state, lag_day)
library(tidyverse)
library(ggplot2)
library(readr)
library(ggseas)
library(chron)
library(plotly)
data <- read_csv("covid.com.csv") %>%
select(c(-1))
# change event code to description
group_event_catg <- function(x){
new_col = c()
check = substr(x, nchar(x), nchar(x))
if (is.na(check)){
new_col <- append(new_col, x)
} else if(check == "M"){
new_col <- append(new_col, "Mandatory")
} else if (check == "R"){
new_col <- append(new_col, "Re-Issued")
} else if (check == "E"){
new_col <- append(new_col, "Eased")
} else if (check == "L"){
new_col <- append(new_col, "Lifted ")
}
}
data$event_MELR <- sapply(data$EVENT_CATG_S, FUN=group_event_catg)
# category num
big_catg <- function(x){
new_col = c()
if (is.na(x)){
new_col <- append(new_col, x)
}
else if(x=="15M"){
new_col <- append(new_col, "Face Covering")
} else if(grepl("2", x)){
new_col <- append(new_col, "Business Restrictions")
} else if(grepl("3", x)){
new_col <- append(new_col, "Indoor Gathering Restrictions")
} else if(grepl("4", x)){
new_col <- append(new_col, "Restaurant/Bar Restrictions")
} else{
new_col <- append(new_col, "Stay at Home Orders")
}
}
data$big_cat <- sapply(data$EVENT_CATG_S, FUN=big_catg)
data$event <- paste(data$big_cat, "\n", data$event_MELR)
# Implementation, Lifting, Ease
lag_catg <- function(x){
new_col = c()
check = substr(x, nchar(x), nchar(x))
if (is.na(check)){
new_col <- append(new_col, "No Event")
}else if(check %in% c("M", "R", "I")){
new_col <- append(new_col, "Implemented")
} else if (check == "E"){
new_col <- append(new_col, "Eased")
} else if (check == "L"){
new_col <- append(new_col, "Lifted")
} else {
new_col <- append(new_col, "No Event")
}
}
data$lag_catg <- sapply(data$EVENT_CATG_S, FUN=lag_catg)
plot_lag <- function(state, lead_n){
state_data <- data[data$STATE==state,]
identity_x <- seq(0, max(na.omit(state_data$NEWCD_NORM_500)), by=1)
identity_y <- identity_x
corr <- round(acf(na.omit(state_data$NEWCD_NORM_500),
lag.max=lead_n,
plot=FALSE)[lead_n]$acf[1], digits=2)
state_data$n_lead = rep(NA, nrow(state_data))
for (i in 1:(nrow(state_data)-lead_n)){
today = state_data[i, 3]
n_day_after = today+lead_n
inst = state_data[as.character(state_data$DATE)==as.character(n_day_after[1,1]),]
state_data$n_lead[i] = inst$NEWCD_NORM_500
}
state_data_cut <- state_data[!is.na(state_data$lag_catg),]
plot2 <- ggplot(data=state_data_cut)+
geom_point(aes(x=NEWCD_NORM_500, y=n_lead,
col=as.factor(lag_catg),
text=paste("Date of x-axis:", DATE,
"\nDate of y-axis:", DATE+lead_n,
"\nEvent:", event)), size=2)+
scale_color_manual(values=c("#f2615d", "#2d1160","#ffd799","#d9d9d9"),
name="Event Category")+
# scale_color_manual(values=c("#f2615d", "#2d1160","#ffd799"),
#                    name="Event Category",
#                     labels=c("Eased", "Implemented", "Lifted", ""))+
geom_line(data=data.frame(identity_x, identity_y),
aes(x=identity_x, y=identity_y), linetype="dotted", size=1)+
labs(title=paste(str_to_title(state),"lag", lead_n, "correlation=", corr),
x="Today's Norm New Confirmed Cases",
y=paste("Normalized New Daily Cases", lead_n, "days later"))+
theme_bw()
ggplotly(plot2, tooltip="text")
}
state = "WASHINGTON"
lag_day = 28
plot_lag(state, lag_day) #function to plot - no need to change
state = "WASHINGTON"
lag_day = 7
plot_lag(state, lag_day) #function to plot - no need to change
plot_lag(state, lag_day)
state = "WASHINGTON"
lag_day = 14
plot_lag(state, lag_day) #function to plot - no need to change
state = "TEXAS"
lag_day = 7
plot_lag(state, lag_day) #function to plot - no need to change
state = "TEXAS"
lag_day = 14
plot_lag(state, lag_day) #function to plot - no need to change
state = "TEXAS"
lag_day = 28
plot_lag(state, lag_day) #function to plot - no need to change
state = "TEXAS"
lag_day = 45
plot_lag(state, lag_day) #function to plot - no need to change
state = "TEXAS"
lag_day = 60
plot_lag(state, lag_day) #function to plot - no need to change
state = "TEXAS"
lag_day = 45
plot_lag(state, lag_day) #function to plot - no need to change
state = "TEXAS"
lag_day = 30
plot_lag(state, lag_day) #function to plot - no need to change
state = "TEXAS"
lag_day = 7
plot_lag(state, lag_day) #function to plot - no need to change
plot_lag(state, lag_day)
state = "TEXAS"
lag_day = 14
plot_lag(state, lag_day) #function to plot - no need to change
plot_lag(state, lag_day)
state = "TEXAS"
lag_day = 30
plot_lag(state, lag_day) #function to plot - no need to change
plot_lag(state, lag_day)
plot_lag <- function(state, lead_n){
state_data <- data[data$STATE==state,]
identity_x <- seq(0, max(na.omit(state_data$NEWCD_NORM_500)), by=1)
identity_y <- identity_x
corr <- round(acf(na.omit(state_data$NEWCD_NORM_500),
lag.max=lead_n,
plot=FALSE)[lead_n]$acf[1], digits=2)
state_data$n_lead = rep(NA, nrow(state_data))
for (i in 1:(nrow(state_data)-lead_n)){
today = state_data[i, 3]
n_day_after = today+lead_n
inst = state_data[as.character(state_data$DATE)==as.character(n_day_after[1,1]),]
state_data$n_lead[i] = inst$NEWCD_NORM_500
}
state_data_cut <- state_data[!is.na(state_data$lag_catg),]
plot2 <- ggplot(data=state_data_cut)+
geom_point(aes(x=NEWCD_NORM_500, y=n_lead,
col=as.factor(lag_catg),
text=paste("Date of x-axis:", DATE,
"\nDate of y-axis:", DATE+lead_n,
"\nEvent:", event)), size=2)+
scale_color_manual(values=c("#f2615d", "#2d1160","#ffd799","#d9d9d9"),
name="Event Category")+
# scale_color_manual(values=c("#f2615d", "#2d1160","#ffd799"),
#                    name="Event Category",
#                     labels=c("Eased", "Implemented", "Lifted", ""))+
geom_line(data=data.frame(identity_x, identity_y),
aes(x=identity_x, y=identity_y), linetype="dotted", size=1)+
xlim(0, 120) +
ylim(0, 300) +
labs(title=paste(str_to_title(state),"lag", lead_n, "correlation=", corr),
x="Today's Norm New Confirmed Cases",
y=paste("Normalized New Daily Cases", lead_n, "days later"))+
theme_bw()
ggplotly(plot2, tooltip="text")
}
state = "TEXAS"
lag_day = 30
plot_lag(state, lag_day) #function to plot - no need to change
state = "TEXAS"
lag_day = 7
plot_lag(state, lag_day) #function to plot - no need to change
state = "TEXAS"
lag_day = 30
plot_lag(state, lag_day) #function to plot - no need to change
state = "TEXAS"
lag_day = 7
plot_lag(state, lag_day) #function to plot - no need to change
plot_lag(state, lag_day)
state = "TEXAS"
lag_day = 14
plot_lag(state, lag_day) #function to plot - no need to change
plot_lag(state, lag_day)
state = "TEXAS"
lag_day = 30
plot_lag(state, lag_day) #function to plot - no need to change
plot_lag(state, lag_day)
state = "TEXAS"
lag_day = 7
plot_lag(state, lag_day) #function to plot - no need to change
state = "TEXAS"
lag_day = 14
plot_lag(state, lag_day) #function to plot - no need to change
state = "TEXAS"
lag_day = 30
plot_lag(state, lag_day) #function to plot - no need to change
state = "TEXAS"
lag_day = 14
plot_lag(state, lag_day) #function to plot - no need to change
state = "TEXAS"
lag_day = 30
plot_lag(state, lag_day) #function to plot - no need to change
state = "TEXAS"
lag_day = 45
plot_lag(state, lag_day) #function to plot - no need to change
state = "TEXAS"
lag_day = 60
plot_lag(state, lag_day) #function to plot - no need to change
state = "TEXAS"
lag_day = 30
plot_lag(state, lag_day) #function to plot - no need to change
