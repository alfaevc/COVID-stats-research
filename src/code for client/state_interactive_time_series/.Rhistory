state_data_cut$lift = rep(0, nrow(state_data_cut))
state_data_cut$implt = rep(0, nrow(state_data_cut))
for (i in 1:length(unique_date)){
today = unique_date[i]
today_dt = state_data_cut[state_data_cut$DATE==today,]
ind = which(state_data_cut$DATE==today)
today_lag_cat = today_dt$lag_catg
count_ease = 0.0
count_lift = 0.0
count_implt = 0.0
combine_event = ""
for (j in 1:nrow(today_dt)){
cat = today_dt[j, "lag_catg"]
if (cat=="Implemented"){
count_implt = count_implt+1.0
} else if (cat=="Eased"){
count_ease = count_ease+1.0
} else{
count_implt = count_implt+1.0
}
combine_event = paste(combine_event, today_dt[j, "event"], "\n")
if (j != 1){
cut_row = ind[1]+1
state_data_cut = state_data_cut[-cut_row,]
}
}
# assign counts for the first instance
state_data_cut[ind[1],"ease"] = count_ease
state_data_cut[ind[1],"lift"] = count_lift
state_data_cut[ind[1],"implt"] = count_implt
state_data_cut[ind[1],"event"] = combine_event
}
state_data_cut <- as.data.frame(state_data_cut)
ggplot()+
geom_scatterpie(data=state_data_cut,
aes(x=NEWCD_NORM_500, y=n_lead,group=DATE,
cols=c("ease", "lift", "implt")))+
#geom_point(aes(x=NEWCD_NORM_500, y=n_lead,
#col=as.factor(lag_catg),
#text=paste("Date of x-axis:", DATE,
#"\nDate of y-axis:", DATE+lead_n,
# "\nEvent:", event)), size=2)+
#scale_color_manual(values=c("#f2615d", "#2d1160","#ffd799"),
#name="Event Category",
#labels=c("Eased", "Implemented", "Lifted", ""))+
# geom_line(data=data.frame(identity_x, identity_y),
#           aes(x=identity_x, y=identity_y), linetype="dotted", size=1)+
# labs(title=paste(str_to_title(state),"lag", lead_n, "correlation=", corr),
#      x="Today's Norm New Confirmed Cases",
#      y=paste("Normalized New Daily Cases", lead_n, "days later"))+
theme_bw()
state_data_cut[,"lift"]
typeof(state_data_cut[,"lift"])
set.seed(123)
long <- rnorm(50, sd=100)
lat <- rnorm(50, sd=50)
d <- data.frame(long=long, lat=lat)
d <- with(d, d[abs(long) < 150 & abs(lat) < 70,])
n <- nrow(d)
d$region <- factor(1:n)
d$A <- abs(rnorm(n, sd=1))
d$B <- abs(rnorm(n, sd=2))
d$C <- abs(rnorm(n, sd=3))
d$D <- abs(rnorm(n, sd=4))
d[1, 4:7] <- d[1, 4:7] * 3
head(d)
ggplot() + geom_scatterpie(aes(x=long, y=lat, group=region), data=d,
cols=LETTERS[1:4]) + coord_equal()
state = "CALIFORNIA"
lag_day = 28
state_data <- data[data$STATE==state,]
identity_x <- seq(0, max(na.omit(state_data$NEWCD_NORM_500)), by=1)
identity_y <- identity_x
lead_n = 7
corr <- round(acf(na.omit(state_data$NEWCD_NORM_500),
lag.max=lead_n,
plot=FALSE)[lead_n]$acf[1], digits=2)
state_data$n_lead = rep(NA, nrow(state_data))
for (i in 1:(nrow(state_data)-lead_n)){
today = state_data[i, 3]
n_day_after = today+lead_n
inst = state_data[as.character(state_data$DATE)==as.character(n_day_after[1,1]),]
state_data$n_lead[i] = inst$NEWCD_NORM_500
}
state_data_cut <- state_data[!is.na(state_data$lag_catg),]
unique_date = unique(state_data_cut$DATE)
state_data_cut$ease = rep(0, nrow(state_data_cut))
state_data_cut$lift = rep(0, nrow(state_data_cut))
state_data_cut$implt = rep(0, nrow(state_data_cut))
for (i in 1:length(unique_date)){
today = unique_date[i]
today_dt = state_data_cut[state_data_cut$DATE==today,]
ind = which(state_data_cut$DATE==today)
today_lag_cat = today_dt$lag_catg
count_ease = 0.0
count_lift = 0.0
count_implt = 0.0
combine_event = ""
for (j in 1:nrow(today_dt)){
cat = today_dt[j, "lag_catg"]
if (cat=="Implemented"){
count_implt = count_implt+1.0
} else if (cat=="Eased"){
count_ease = count_ease+1.0
} else{
count_implt = count_implt+1.0
}
combine_event = paste(combine_event, today_dt[j, "event"], "\n")
if (j != 1){
cut_row = ind[1]+1
state_data_cut = state_data_cut[-cut_row,]
}
}
# assign counts for the first instance
state_data_cut[ind[1],"ease"] = count_ease
state_data_cut[ind[1],"lift"] = count_lift
state_data_cut[ind[1],"implt"] = count_implt
state_data_cut[ind[1],"event"] = combine_event
}
state_data_cut <- as.data.frame(state_data_cut)
ggplot()+
geom_scatterpie(data=state_data_cut,
aes(x=NEWCD_NORM_500, y=n_lead,group=DATE),
cols=c("ease", "lift", "implt"))+
#geom_point(aes(x=NEWCD_NORM_500, y=n_lead,
#col=as.factor(lag_catg),
#text=paste("Date of x-axis:", DATE,
#"\nDate of y-axis:", DATE+lead_n,
# "\nEvent:", event)), size=2)+
#scale_color_manual(values=c("#f2615d", "#2d1160","#ffd799"),
#name="Event Category",
#labels=c("Eased", "Implemented", "Lifted", ""))+
# geom_line(data=data.frame(identity_x, identity_y),
#           aes(x=identity_x, y=identity_y), linetype="dotted", size=1)+
# labs(title=paste(str_to_title(state),"lag", lead_n, "correlation=", corr),
#      x="Today's Norm New Confirmed Cases",
#      y=paste("Normalized New Daily Cases", lead_n, "days later"))+
theme_bw()
plot_lag <- function(state, lead_n){
state_data <- data[data$STATE==state,]
identity_x <- seq(0, max(na.omit(state_data$NEWCD_NORM_500)), by=1)
identity_y <- identity_x
corr <- round(acf(na.omit(state_data$NEWCD_NORM_500),
lag.max=lead_n,
plot=FALSE)[lead_n]$acf[1], digits=2)
state_data$n_lead = rep(NA, nrow(state_data))
for (i in 1:(nrow(state_data)-lead_n)){
today = state_data[i, 3]
n_day_after = today+lead_n
inst = state_data[as.character(state_data$DATE)==as.character(n_day_after[1,1]),]
state_data$n_lead[i] = inst$NEWCD_NORM_500
}
state_data_cut <- state_data[!is.na(state_data$lag_catg),]
unique_date = unique(state_data_cut$DATE)
state_data_cut$ease = rep(0, nrow(state_data_cut))
state_data_cut$lift = rep(0, nrow(state_data_cut))
state_data_cut$implt = rep(0, nrow(state_data_cut))
for (i in 1:length(unique_date)){
today = unique_date[i]
today_dt = state_data_cut[state_data_cut$DATE==today,]
ind = which(state_data_cut$DATE==today)
today_lag_cat = today_dt$lag_catg
count_ease = 0.0
count_lift = 0.0
count_implt = 0.0
combine_event = ""
for (j in 1:nrow(today_dt)){
cat = today_dt[j, "lag_catg"]
if (cat=="Implemented"){
count_implt = count_implt+1.0
} else if (cat=="Eased"){
count_ease = count_ease+1.0
} else{
count_implt = count_implt+1.0
}
combine_event = paste(combine_event, today_dt[j, "event"], "\n")
if (j != 1){
cut_row = ind[1]+1
state_data_cut = state_data_cut[-cut_row,]
}
}
# assign counts for the first instance
state_data_cut[ind[1],"ease"] = count_ease
state_data_cut[ind[1],"lift"] = count_lift
state_data_cut[ind[1],"implt"] = count_implt
state_data_cut[ind[1],"event"] = combine_event
}
state_data_cut <- as.data.frame(state_data_cut)
ggplot()+
geom_scatterpie(data=state_data_cut,
aes(x=NEWCD_NORM_500, y=n_lead,group=DATE),
cols=c("ease", "lift", "implt"))+
#geom_point(aes(x=NEWCD_NORM_500, y=n_lead,
#col=as.factor(lag_catg),
#text=paste("Date of x-axis:", DATE,
#"\nDate of y-axis:", DATE+lead_n,
# "\nEvent:", event)), size=2)+
#scale_color_manual(values=c("#f2615d", "#2d1160","#ffd799"),
#name="Event Category",
#labels=c("Eased", "Implemented", "Lifted", ""))+
#geom_line(data=data.frame(identity_x, identity_y),
#aes(x=identity_x, y=identity_y), linetype="dotted", size=1)+
#labs(title=paste(str_to_title(state),"lag", lead_n, "correlation=", corr),
#x="Today's Norm New Confirmed Cases",
#y=paste("Normalized New Daily Cases", lead_n, "days later"))+
theme_bw()
#ggplotly(plot2, tooltip="text")
}
state = "CALIFORNIA"
lag_day = 28
plot_lag(state, lag_day) #function to plot - no need to change
plot_lag <- function(state, lead_n){
state_data <- data[data$STATE==state,]
identity_x <- seq(0, max(na.omit(state_data$NEWCD_NORM_500)), by=1)
identity_y <- identity_x
corr <- round(acf(na.omit(state_data$NEWCD_NORM_500),
lag.max=lead_n,
plot=FALSE)[lead_n]$acf[1], digits=2)
state_data$n_lead = rep(NA, nrow(state_data))
for (i in 1:(nrow(state_data)-lead_n)){
today = state_data[i, 3]
n_day_after = today+lead_n
inst = state_data[as.character(state_data$DATE)==as.character(n_day_after[1,1]),]
state_data$n_lead[i] = inst$NEWCD_NORM_500
}
state_data_cut <- state_data[!is.na(state_data$lag_catg),]
unique_date = unique(state_data_cut$DATE)
state_data_cut$ease = rep(0, nrow(state_data_cut))
state_data_cut$lift = rep(0, nrow(state_data_cut))
state_data_cut$implt = rep(0, nrow(state_data_cut))
for (i in 1:length(unique_date)){
today = unique_date[i]
today_dt = state_data_cut[state_data_cut$DATE==today,]
ind = which(state_data_cut$DATE==today)
today_lag_cat = today_dt$lag_catg
count_ease = 0.0
count_lift = 0.0
count_implt = 0.0
combine_event = ""
for (j in 1:nrow(today_dt)){
cat = today_dt[j, "lag_catg"]
if (cat=="Implemented"){
count_implt = count_implt+1.0
} else if (cat=="Eased"){
count_ease = count_ease+1.0
} else{
count_implt = count_implt+1.0
}
combine_event = paste(combine_event, today_dt[j, "event"], "\n")
if (j != 1){
cut_row = ind[1]+1
state_data_cut = state_data_cut[-cut_row,]
}
}
# assign counts for the first instance
state_data_cut[ind[1],"ease"] = count_ease
state_data_cut[ind[1],"lift"] = count_lift
state_data_cut[ind[1],"implt"] = count_implt
state_data_cut[ind[1],"event"] = combine_event
}
state_data_cut <- as.data.frame(state_data_cut)
ggplot()+
geom_scatterpie(data=state_data_cut,
aes(x=NEWCD_NORM_500, y=n_lead,group=DATE),
cols=c("ease", "lift", "implt"))+
#geom_point(aes(x=NEWCD_NORM_500, y=n_lead,
#col=as.factor(lag_catg),
#text=paste("Date of x-axis:", DATE,
#"\nDate of y-axis:", DATE+lead_n,
# "\nEvent:", event)), size=2)+
scale_color_manual(values=c("#f2615d", "#2d1160","#ffd799"),
name="Event Category",
labels=c("Eased", "Implemented", "Lifted", ""))+
#geom_line(data=data.frame(identity_x, identity_y),
#aes(x=identity_x, y=identity_y), linetype="dotted", size=1)+
#labs(title=paste(str_to_title(state),"lag", lead_n, "correlation=", corr),
#x="Today's Norm New Confirmed Cases",
#y=paste("Normalized New Daily Cases", lead_n, "days later"))+
theme_bw()
#ggplotly(plot2, tooltip="text")
}
state = "CALIFORNIA"
lag_day = 28
plot_lag(state, lag_day) #function to plot - no need to change
plot_lag <- function(state, lead_n){
state_data <- data[data$STATE==state,]
identity_x <- seq(0, max(na.omit(state_data$NEWCD_NORM_500)), by=1)
identity_y <- identity_x
corr <- round(acf(na.omit(state_data$NEWCD_NORM_500),
lag.max=lead_n,
plot=FALSE)[lead_n]$acf[1], digits=2)
state_data$n_lead = rep(NA, nrow(state_data))
for (i in 1:(nrow(state_data)-lead_n)){
today = state_data[i, 3]
n_day_after = today+lead_n
inst = state_data[as.character(state_data$DATE)==as.character(n_day_after[1,1]),]
state_data$n_lead[i] = inst$NEWCD_NORM_500
}
state_data_cut <- state_data[!is.na(state_data$lag_catg),]
unique_date = unique(state_data_cut$DATE)
state_data_cut$ease = rep(0, nrow(state_data_cut))
state_data_cut$lift = rep(0, nrow(state_data_cut))
state_data_cut$implt = rep(0, nrow(state_data_cut))
for (i in 1:length(unique_date)){
today = unique_date[i]
today_dt = state_data_cut[state_data_cut$DATE==today,]
ind = which(state_data_cut$DATE==today)
today_lag_cat = today_dt$lag_catg
count_ease = 0.0
count_lift = 0.0
count_implt = 0.0
combine_event = ""
for (j in 1:nrow(today_dt)){
cat = today_dt[j, "lag_catg"]
if (cat=="Implemented"){
count_implt = count_implt+1.0
} else if (cat=="Eased"){
count_ease = count_ease+1.0
} else{
count_implt = count_implt+1.0
}
combine_event = paste(combine_event, today_dt[j, "event"], "\n")
if (j != 1){
cut_row = ind[1]+1
state_data_cut = state_data_cut[-cut_row,]
}
}
# assign counts for the first instance
state_data_cut[ind[1],"ease"] = count_ease
state_data_cut[ind[1],"lift"] = count_lift
state_data_cut[ind[1],"implt"] = count_implt
state_data_cut[ind[1],"event"] = combine_event
}
state_data_cut <- as.data.frame(state_data_cut)
plot2 <- ggplot()+
geom_scatterpie(data=state_data_cut,
aes(x=NEWCD_NORM_500, y=n_lead,group=DATE),
cols=c("ease", "lift", "implt"))+
#geom_point(aes(x=NEWCD_NORM_500, y=n_lead,
#col=as.factor(lag_catg),
#text=paste("Date of x-axis:", DATE,
#"\nDate of y-axis:", DATE+lead_n,
# "\nEvent:", event)), size=2)+
scale_color_manual(values=c("#f2615d", "#2d1160","#ffd799"),
name="Event Category",
labels=c("Eased", "Implemented", "Lifted", ""))+
geom_line(data=data.frame(identity_x, identity_y),
aes(x=identity_x, y=identity_y), linetype="dotted", size=1)+
labs(title=paste(str_to_title(state),"lag", lead_n, "correlation=", corr),
x="Today's Norm New Confirmed Cases",
y=paste("Normalized New Daily Cases", lead_n, "days later"))+
theme_bw()
ggplotly(plot2)
}
state = "CALIFORNIA"
lag_day = 28
plot_lag(state, lag_day) #function to plot - no need to change
state = "FLORIDA"
lag_day = 28
plot_lag(state, lag_day) #function to plot - no need to change
plot_lag <- function(state, lead_n){
state_data <- data[data$STATE==state,]
identity_x <- seq(0, max(na.omit(state_data$NEWCD_NORM_500)), by=1)
identity_y <- identity_x
corr <- round(acf(na.omit(state_data$NEWCD_NORM_500),
lag.max=lead_n,
plot=FALSE)[lead_n]$acf[1], digits=2)
state_data$n_lead = rep(NA, nrow(state_data))
for (i in 1:(nrow(state_data)-lead_n)){
today = state_data[i, 3]
n_day_after = today+lead_n
inst = state_data[as.character(state_data$DATE)==as.character(n_day_after[1,1]),]
state_data$n_lead[i] = inst$NEWCD_NORM_500
}
state_data_cut <- state_data[!is.na(state_data$lag_catg),]
unique_date = unique(state_data_cut$DATE)
state_data_cut$ease = rep(0, nrow(state_data_cut))
state_data_cut$lift = rep(0, nrow(state_data_cut))
state_data_cut$implt = rep(0, nrow(state_data_cut))
for (i in 1:length(unique_date)){
today = unique_date[i]
today_dt = state_data_cut[state_data_cut$DATE==today,]
ind = which(state_data_cut$DATE==today)
today_lag_cat = today_dt$lag_catg
count_ease = 0.0
count_lift = 0.0
count_implt = 0.0
combine_event = ""
for (j in 1:nrow(today_dt)){
cat = today_dt[j, "lag_catg"]
if (cat=="Implemented"){
count_implt = count_implt+1.0
} else if (cat=="Eased"){
count_ease = count_ease+1.0
} else{
count_implt = count_implt+1.0
}
combine_event = paste(combine_event, today_dt[j, "event"], "\n")
if (j != 1){
cut_row = ind[1]+1
state_data_cut = state_data_cut[-cut_row,]
}
}
# assign counts for the first instance
state_data_cut[ind[1],"ease"] = count_ease
state_data_cut[ind[1],"lift"] = count_lift
state_data_cut[ind[1],"implt"] = count_implt
state_data_cut[ind[1],"event"] = combine_event
}
state_data_cut <- as.data.frame(state_data_cut)
plot2 <- ggplot()+
geom_scatterpie(data=state_data_cut,
aes(x=NEWCD_NORM_500, y=n_lead,group=DATE),
cols=c("ease", "lift", "implt"))+
#geom_point(aes(x=NEWCD_NORM_500, y=n_lead,
#col=as.factor(lag_catg),
#text=paste("Date of x-axis:", DATE,
#"\nDate of y-axis:", DATE+lead_n,
# "\nEvent:", event)), size=2)+
scale_color_manual(values=c("#f2615d", "#2d1160","#ffd799"),
name="Event Category",
labels=c("Eased", "Implemented", "Lifted", ""))+
geom_line(data=data.frame(identity_x, identity_y),
aes(x=identity_x, y=identity_y), linetype="dotted", size=1)+
labs(title=paste(str_to_title(state),"lag", lead_n, "correlation=", corr),
x="Today's Norm New Confirmed Cases",
y=paste("Normalized New Daily Cases", lead_n, "days later"))+
theme_bw()
plot2
#ggplotly(plot2)
}
state = "FLORIDA"
lag_day = 28
plot_lag(state, lag_day) #function to plot - no need to change
state = "ALABAMA"
lag_day = 28
plot_lag(state, lag_day) #function to plot - no need to change
plot_lag <- function(state, lead_n){
state_data <- data[data$STATE==state,]
identity_x <- seq(0, max(na.omit(state_data$NEWCD_NORM_500)), by=1)
identity_y <- identity_x
corr <- round(acf(na.omit(state_data$NEWCD_NORM_500),
lag.max=lead_n,
plot=FALSE)[lead_n]$acf[1], digits=2)
state_data$n_lead = rep(NA, nrow(state_data))
for (i in 1:(nrow(state_data)-lead_n)){
today = state_data[i, 3]
n_day_after = today+lead_n
inst = state_data[as.character(state_data$DATE)==as.character(n_day_after[1,1]),]
state_data$n_lead[i] = inst$NEWCD_NORM_500
}
state_data_cut <- state_data[!is.na(state_data$lag_catg),]
unique_date = unique(state_data_cut$DATE)
state_data_cut$ease = rep(0, nrow(state_data_cut))
state_data_cut$lift = rep(0, nrow(state_data_cut))
state_data_cut$implt = rep(0, nrow(state_data_cut))
for (i in 1:length(unique_date)){
today = unique_date[i]
today_dt = state_data_cut[state_data_cut$DATE==today,]
ind = which(state_data_cut$DATE==today)
today_lag_cat = today_dt$lag_catg
count_ease = 0.0
count_lift = 0.0
count_implt = 0.0
combine_event = ""
for (j in 1:nrow(today_dt)){
cat = today_dt[j, "lag_catg"]
if (cat=="Implemented"){
count_implt = count_implt+1.0
} else if (cat=="Eased"){
count_ease = count_ease+1.0
} else{
count_lift = count_lift+1.0
}
combine_event = paste(combine_event, today_dt[j, "event"], "\n")
if (j != 1){
cut_row = ind[1]+1
state_data_cut = state_data_cut[-cut_row,]
}
}
# assign counts for the first instance
state_data_cut[ind[1],"ease"] = count_ease
state_data_cut[ind[1],"lift"] = count_lift
state_data_cut[ind[1],"implt"] = count_implt
state_data_cut[ind[1],"event"] = combine_event
}
state_data_cut <- as.data.frame(state_data_cut)
plot2 <- ggplot()+
geom_scatterpie(data=state_data_cut,
aes(x=NEWCD_NORM_500, y=n_lead,group=DATE),
cols=c("ease", "lift", "implt"))+
#geom_point(aes(x=NEWCD_NORM_500, y=n_lead,
#col=as.factor(lag_catg),
#text=paste("Date of x-axis:", DATE,
#"\nDate of y-axis:", DATE+lead_n,
# "\nEvent:", event)), size=2)+
scale_color_manual(values=c("#f2615d", "#2d1160","#ffd799"),
name="Event Category",
labels=c("Eased", "Implemented", "Lifted", ""))+
geom_line(data=data.frame(identity_x, identity_y),
aes(x=identity_x, y=identity_y), linetype="dotted", size=1)+
labs(title=paste(str_to_title(state),"lag", lead_n, "correlation=", corr),
x="Today's Norm New Confirmed Cases",
y=paste("Normalized New Daily Cases", lead_n, "days later"))+
theme_bw()
plot2
#ggplotly(plot2)
}
state = "ALABAMA"
lag_day = 28
plot_lag(state, lag_day) #function to plot - no need to change
plot_lag(state, lag_day)
