# append to final data for plotting
master_df = rbind(master_df,as.data.frame(state_data))}
}
# add a new column of moving average
# otherwise interactive plot cannot show date
master_df$newcd_norm_moving <- rollmean(master_df$Newcd_norm, 7,
fill=NA, align="right")
event_master_df <- master_df[!is.na(master_df$Events) & (master_df$Events!="15M"),]
# change Events_mler on September 14th to be School Opening
school_opening_df <- as.data.frame(master_df[master_df$DATE=="2020-09-07",])
school_opening_df$Events_mler <- "School Opening"
states_trend <- ggplot() +
geom_line(data = master_df, aes(x = Days, y = newcd_norm_moving,
color = STATE, Date=DATE, State=STATE),
size = 1, alpha = 0.5) +
geom_point(data = event_master_df, aes(x = Days, y = newcd_norm_moving,
shape=Events_mler,
Event = Events, Date=DATE,
State=STATE, color=STATE),
alpha = 1, size=3) +
geom_point(data=school_opening_df, aes(x = Days, y = newcd_norm_moving),
size=3, shape=4) +
scale_color_discrete(name="")+
scale_shape_manual(name="")+
xlab("Number of Days Since Mask Order") + ylab("Normalized Daily New Cases") +
theme_bw()
interactive_p <- ggplotly(states_trend, tooltip=c("State", "Date", "Event"))
northeast = c("MAINE","MASSACHUSETTS","RHODE ISLAND","CONNECTICUT",
"VERMONT","NEW YORK","PENNSYLVANIA",
"NEW JERSEY","DELAWARE","MARYLAND")
southeast = c("WEST VIRGINIA","VIRGINIA","KENTUCKY",
"NORTH CAROLINA","ALABAMA")
a=c("IOWA","MINNESOTA","WISCONSIN","ILLINOIS","NEBRASKA",
"KANSAS")
b=c("MINNESOTA","WISCONSIN","ILLINOIS","KANSAS")
states = a
event_order = "15M" # can also try 4E
master_df = data.frame(State=character(),
Date=as.Date(character()),
Events=character(),
Newcd_norm=numeric(),
Days = numeric(),
Events_mler=character())
school_opening_df = data.frame()
for (i in (1: length(states))){
state_data <- data[data$STATE==states[i],]
# aggregate by state, date and combine events & values
state_data <- state_data %>%
group_by(STATE, DATE) %>%
summarise(Events = paste(EVENT_CATG_S, collapse = ","),
Newcd_norm = mean(NEWCD_NORM_500),
Events_mler = first(event_MLER))
# turn "NA" into NA
state_data$Events[state_data$Events=="NA"] <- NA
# index of order implementation date
state_mask_ind = which(sapply(state_data$Events, check_event))
# if a state never issues mask order then plot all data
# else the plot starts at the day of mask order
if(length(state_mask_ind)>0){
state_data = state_data[(state_mask_ind-14):nrow(state_data),]
# number of days since implementation
state_data$Days = as.numeric(state_data$DATE-state_data$DATE[1]-14)
# append to final data for plotting
master_df = rbind(master_df,as.data.frame(state_data))}
}
# add a new column of moving average
# otherwise interactive plot cannot show date
master_df$newcd_norm_moving <- rollmean(master_df$Newcd_norm, 7,
fill=NA, align="right")
event_master_df <- master_df[!is.na(master_df$Events) & (master_df$Events!="15M"),]
# change Events_mler on September 14th to be School Opening
school_opening_df <- as.data.frame(master_df[master_df$DATE=="2020-09-07",])
school_opening_df$Events_mler <- "School Opening"
states_trend <- ggplot() +
geom_line(data = master_df, aes(x = Days, y = newcd_norm_moving,
color = STATE, Date=DATE, State=STATE),
size = 1, alpha = 0.5) +
geom_point(data = event_master_df, aes(x = Days, y = newcd_norm_moving,
shape=Events_mler,
Event = Events, Date=DATE,
State=STATE, color=STATE),
alpha = 1, size=3) +
geom_point(data=school_opening_df, aes(x = Days, y = newcd_norm_moving),
size=3, shape=4) +
scale_color_discrete(name="")+
scale_shape_discrete(name="")+
xlab("Number of Days Since Mask Order") + ylab("Normalized Daily New Cases") +
theme_bw()
interactive_p <- ggplotly(states_trend, tooltip=c("State", "Date", "Event"))
# clean up legend
for (i in 1:length(interactive_p$x$data)){
if (!is.null(interactive_p$x$data[[i]]$name)){
interactive_p$x$data[[i]]$name =  gsub("\\(","",str_split(interactive_p$x$data[[i]]$name,",")[[1]][1])
}
}
interactive_p
northeast = c("MAINE","MASSACHUSETTS","RHODE ISLAND","CONNECTICUT",
"VERMONT","NEW YORK","PENNSYLVANIA",
"NEW JERSEY","DELAWARE","MARYLAND")
southeast = c("WEST VIRGINIA","VIRGINIA","KENTUCKY",
"NORTH CAROLINA","ALABAMA")
a=c("IOWA","MINNESOTA","WISCONSIN","ILLINOIS","NEBRASKA",
"KANSAS")
b=c("MINNESOTA","WISCONSIN","ILLINOIS","KANSAS")
states = a
event_order = "15M" # can also try 4E
master_df = data.frame(State=character(),
Date=as.Date(character()),
Events=character(),
Newcd_norm=numeric(),
Days = numeric(),
Events_mler=character())
school_opening_df = data.frame()
for (i in (1: length(states))){
state_data <- data[data$STATE==states[i],]
# aggregate by state, date and combine events & values
state_data <- state_data %>%
group_by(STATE, DATE) %>%
summarise(Events = paste(EVENT_CATG_S, collapse = ","),
Newcd_norm = mean(NEWCD_NORM_500),
Events_mler = first(event_MLER))
# turn "NA" into NA
state_data$Events[state_data$Events=="NA"] <- NA
# index of order implementation date
state_mask_ind = which(sapply(state_data$Events, check_event))
# if a state never issues mask order then plot all data
# else the plot starts at the day of mask order
if(length(state_mask_ind)>0){
state_data = state_data[(state_mask_ind-14):nrow(state_data),]
# number of days since implementation
state_data$Days = as.numeric(state_data$DATE-state_data$DATE[1]-14)
# append to final data for plotting
master_df = rbind(master_df,as.data.frame(state_data))}
}
# add a new column of moving average
# otherwise interactive plot cannot show date
master_df$newcd_norm_moving <- rollmean(master_df$Newcd_norm, 7,
fill=NA, align="right")
event_master_df <- master_df[!is.na(master_df$Events) & (master_df$Events!="15M"),]
# change Events_mler on September 14th to be School Opening
school_opening_df <- as.data.frame(master_df[master_df$DATE=="2020-09-07",])
school_opening_df$Events_mler <- "School Opening"
states_trend <- ggplot() +
geom_line(data = master_df, aes(x = Days, y = newcd_norm_moving,
color = STATE, Date=DATE, State=STATE),
size = 1, alpha = 0.5) +
geom_point(data = event_master_df, aes(x = Days, y = newcd_norm_moving,
shape=Events_mler,
Event = Events, Date=DATE,
State=STATE, color=STATE),
alpha = 1, size=3) +
geom_point(data=school_opening_df, aes(x = Days, y = newcd_norm_moving,
shape = Events_mler),
size=3) +
scale_color_discrete(name="")+
scale_shape_discrete(name="")+
xlab("Number of Days Since Mask Order") + ylab("Normalized Daily New Cases") +
theme_bw()
interactive_p <- ggplotly(states_trend, tooltip=c("State", "Date", "Event"))
# clean up legend
for (i in 1:length(interactive_p$x$data)){
if (!is.null(interactive_p$x$data[[i]]$name)){
interactive_p$x$data[[i]]$name =  gsub("\\(","",str_split(interactive_p$x$data[[i]]$name,",")[[1]][1])
}
}
interactive_p
northeast = c("MAINE","MASSACHUSETTS","RHODE ISLAND","CONNECTICUT",
"VERMONT","NEW YORK","PENNSYLVANIA",
"NEW JERSEY","DELAWARE","MARYLAND")
southeast = c("WEST VIRGINIA","VIRGINIA","KENTUCKY",
"NORTH CAROLINA","ALABAMA")
a=c("IOWA","MINNESOTA","WISCONSIN","ILLINOIS","NEBRASKA",
"KANSAS")
b=c("MINNESOTA","WISCONSIN","ILLINOIS","KANSAS")
states = a
event_order = "15M" # can also try 4E
master_df = data.frame(State=character(),
Date=as.Date(character()),
Events=character(),
Newcd_norm=numeric(),
Days = numeric(),
Events_mler=character())
school_opening_df = data.frame()
for (i in (1: length(states))){
state_data <- data[data$STATE==states[i],]
# aggregate by state, date and combine events & values
state_data <- state_data %>%
group_by(STATE, DATE) %>%
summarise(Events = paste(EVENT_CATG_S, collapse = ","),
Newcd_norm = mean(NEWCD_NORM_500),
Events_mler = first(event_MLER))
# turn "NA" into NA
state_data$Events[state_data$Events=="NA"] <- NA
# index of order implementation date
state_mask_ind = which(sapply(state_data$Events, check_event))
# if a state never issues mask order then plot all data
# else the plot starts at the day of mask order
if(length(state_mask_ind)>0){
state_data = state_data[(state_mask_ind-14):nrow(state_data),]
# number of days since implementation
state_data$Days = as.numeric(state_data$DATE-state_data$DATE[1]-14)
# append to final data for plotting
master_df = rbind(master_df,as.data.frame(state_data))}
}
# add a new column of moving average
# otherwise interactive plot cannot show date
master_df$newcd_norm_moving <- rollmean(master_df$Newcd_norm, 7,
fill=NA, align="right")
event_master_df <- master_df[!is.na(master_df$Events) & (master_df$Events!="15M"),]
# change Events_mler on September 14th to be School Opening
school_opening_df <- as.data.frame(master_df[master_df$DATE=="2020-09-07",])
school_opening_df$Events_mler <- "School Opening"
states_trend <- ggplot() +
geom_line(data = master_df, aes(x = Days, y = newcd_norm_moving,
color = STATE, Date=DATE, State=STATE),
size = 1, alpha = 0.5) +
geom_point(data = event_master_df, aes(x = Days, y = newcd_norm_moving,
shape=Events_mler,
Event = Events, Date=DATE,
State=STATE, color=STATE),
alpha = 1, size=3) +
geom_point(data=school_opening_df, aes(x = Days, y = newcd_norm_moving,
shape = Events_mler),
size=3) +
scale_color_discrete(name="")+
scale_shape_manual(name="", values=c(16,17,4))+
xlab("Number of Days Since Mask Order") + ylab("Normalized Daily New Cases") +
theme_bw()
interactive_p <- ggplotly(states_trend, tooltip=c("State", "Date", "Event"))
# clean up legend
for (i in 1:length(interactive_p$x$data)){
if (!is.null(interactive_p$x$data[[i]]$name)){
interactive_p$x$data[[i]]$name =  gsub("\\(","",str_split(interactive_p$x$data[[i]]$name,",")[[1]][1])
}
}
interactive_p
northeast = c("MAINE","MASSACHUSETTS","RHODE ISLAND","CONNECTICUT",
"VERMONT","NEW YORK","PENNSYLVANIA",
"NEW JERSEY","DELAWARE","MARYLAND")
southeast = c("WEST VIRGINIA","VIRGINIA","KENTUCKY",
"NORTH CAROLINA","ALABAMA")
a=c("IOWA","MINNESOTA","WISCONSIN","ILLINOIS","NEBRASKA",
"KANSAS")
b=c("MINNESOTA","WISCONSIN","ILLINOIS","KANSAS")
states = a
event_order = "15M" # can also try 4E
master_df = data.frame(State=character(),
Date=as.Date(character()),
Events=character(),
Newcd_norm=numeric(),
Days = numeric(),
Events_mler=character())
school_opening_df = data.frame()
for (i in (1: length(states))){
state_data <- data[data$STATE==states[i],]
# aggregate by state, date and combine events & values
state_data <- state_data %>%
group_by(STATE, DATE) %>%
summarise(Events = paste(EVENT_CATG_S, collapse = ","),
Newcd_norm = mean(NEWCD_NORM_500),
Events_mler = first(event_MLER))
# turn "NA" into NA
state_data$Events[state_data$Events=="NA"] <- NA
# index of order implementation date
state_mask_ind = which(sapply(state_data$Events, check_event))
# if a state never issues mask order then plot all data
# else the plot starts at the day of mask order
if(length(state_mask_ind)>0){
state_data = state_data[(state_mask_ind-14):nrow(state_data),]
# number of days since implementation
state_data$Days = as.numeric(state_data$DATE-state_data$DATE[1]-14)
# append to final data for plotting
master_df = rbind(master_df,as.data.frame(state_data))}
}
# add a new column of moving average
# otherwise interactive plot cannot show date
master_df$newcd_norm_moving <- rollmean(master_df$Newcd_norm, 7,
fill=NA, align="right")
event_master_df <- master_df[!is.na(master_df$Events) & (master_df$Events!="15M"),]
# change Events_mler on September 14th to be School Opening
school_opening_df <- as.data.frame(master_df[master_df$DATE=="2020-09-07",])
school_opening_df$Events_mler <- "School Opening"
states_trend <- ggplot() +
geom_line(data = master_df, aes(x = Days, y = newcd_norm_moving,
color = STATE, Date=DATE, State=STATE),
size = 1, alpha = 0.5) +
geom_point(data = event_master_df, aes(x = Days, y = newcd_norm_moving,
shape=Events_mler,
Event = Events, Date=DATE,
State=STATE, color=STATE),
alpha = 1, size=3) +
geom_point(data=school_opening_df, aes(x = Days, y = newcd_norm_moving,
shape = Events_mler),
size=3) +
scale_shape_manual(name="", values=c(16,17,4))+
scale_color_discrete(name="")+
xlab("Number of Days Since Mask Order") + ylab("Normalized Daily New Cases") +
theme_bw()
interactive_p <- ggplotly(states_trend, tooltip=c("State", "Date", "Event"))
# clean up legend
for (i in 1:length(interactive_p$x$data)){
if (!is.null(interactive_p$x$data[[i]]$name)){
interactive_p$x$data[[i]]$name =  gsub("\\(","",str_split(interactive_p$x$data[[i]]$name,",")[[1]][1])
}
}
interactive_p
?geom_vline
northeast = c("MAINE","MASSACHUSETTS","RHODE ISLAND","CONNECTICUT",
"VERMONT","NEW YORK","PENNSYLVANIA",
"NEW JERSEY","DELAWARE","MARYLAND")
southeast = c("WEST VIRGINIA","VIRGINIA","KENTUCKY",
"NORTH CAROLINA","ALABAMA")
a=c("IOWA","MINNESOTA","WISCONSIN","ILLINOIS","NEBRASKA",
"KANSAS")
b=c("MINNESOTA","WISCONSIN","ILLINOIS","KANSAS")
states = a
event_order = "15M" # can also try 4E
master_df = data.frame(State=character(),
Date=as.Date(character()),
Events=character(),
Newcd_norm=numeric(),
Days = numeric(),
Events_mler=character())
school_opening_df = data.frame()
for (i in (1: length(states))){
state_data <- data[data$STATE==states[i],]
# aggregate by state, date and combine events & values
state_data <- state_data %>%
group_by(STATE, DATE) %>%
summarise(Events = paste(EVENT_CATG_S, collapse = ","),
Newcd_norm = mean(NEWCD_NORM_500),
Events_mler = first(event_MLER))
# turn "NA" into NA
state_data$Events[state_data$Events=="NA"] <- NA
# index of order implementation date
state_mask_ind = which(sapply(state_data$Events, check_event))
# if a state never issues mask order then plot all data
# else the plot starts at the day of mask order
if(length(state_mask_ind)>0){
state_data = state_data[(state_mask_ind-14):nrow(state_data),]
# number of days since implementation
state_data$Days = as.numeric(state_data$DATE-state_data$DATE[1]-14)
# append to final data for plotting
master_df = rbind(master_df,as.data.frame(state_data))}
}
# add a new column of moving average
# otherwise interactive plot cannot show date
master_df$newcd_norm_moving <- rollmean(master_df$Newcd_norm, 7,
fill=NA, align="right")
event_master_df <- master_df[!is.na(master_df$Events) & (master_df$Events!="15M"),]
# change Events_mler on September 14th to be School Opening
school_opening_df <- as.data.frame(master_df[master_df$DATE=="2020-09-07",])
school_opening_df$Events_mler <- "School Opening"
states_trend <- ggplot() +
geom_line(data = master_df, aes(x = Days, y = newcd_norm_moving,
color = STATE, Date=DATE, State=STATE),
size = 1, alpha = 0.5) +
geom_point(data = event_master_df, aes(x = Days, y = newcd_norm_moving,
shape=Events_mler,
Event = Events, Date=DATE,
State=STATE, color=STATE),
alpha = 1, size=3) +
geom_point(data=school_opening_df, aes(x = Days, y = newcd_norm_moving,
shape = Events_mler),
size=3) +
geom_vline(xintercept=0)
scale_shape_manual(name="", values=c(16,17,4))+
scale_color_discrete(name="")+
xlab("Number of Days Since Mask Order") + ylab("Normalized Daily New Cases") +
theme_bw()
northeast = c("MAINE","MASSACHUSETTS","RHODE ISLAND","CONNECTICUT",
"VERMONT","NEW YORK","PENNSYLVANIA",
"NEW JERSEY","DELAWARE","MARYLAND")
southeast = c("WEST VIRGINIA","VIRGINIA","KENTUCKY",
"NORTH CAROLINA","ALABAMA")
a=c("IOWA","MINNESOTA","WISCONSIN","ILLINOIS","NEBRASKA",
"KANSAS")
b=c("MINNESOTA","WISCONSIN","ILLINOIS","KANSAS")
states = a
event_order = "15M" # can also try 4E
master_df = data.frame(State=character(),
Date=as.Date(character()),
Events=character(),
Newcd_norm=numeric(),
Days = numeric(),
Events_mler=character())
school_opening_df = data.frame()
for (i in (1: length(states))){
state_data <- data[data$STATE==states[i],]
# aggregate by state, date and combine events & values
state_data <- state_data %>%
group_by(STATE, DATE) %>%
summarise(Events = paste(EVENT_CATG_S, collapse = ","),
Newcd_norm = mean(NEWCD_NORM_500),
Events_mler = first(event_MLER))
# turn "NA" into NA
state_data$Events[state_data$Events=="NA"] <- NA
# index of order implementation date
state_mask_ind = which(sapply(state_data$Events, check_event))
# if a state never issues mask order then plot all data
# else the plot starts at the day of mask order
if(length(state_mask_ind)>0){
state_data = state_data[(state_mask_ind-14):nrow(state_data),]
# number of days since implementation
state_data$Days = as.numeric(state_data$DATE-state_data$DATE[1]-14)
# append to final data for plotting
master_df = rbind(master_df,as.data.frame(state_data))}
}
# add a new column of moving average
# otherwise interactive plot cannot show date
master_df$newcd_norm_moving <- rollmean(master_df$Newcd_norm, 7,
fill=NA, align="right")
event_master_df <- master_df[!is.na(master_df$Events) & (master_df$Events!="15M"),]
# change Events_mler on September 14th to be School Opening
school_opening_df <- as.data.frame(master_df[master_df$DATE=="2020-09-07",])
school_opening_df$Events_mler <- "School Opening"
states_trend <- ggplot() +
geom_line(data = master_df, aes(x = Days, y = newcd_norm_moving,
color = STATE, Date=DATE, State=STATE),
size = 1, alpha = 0.5) +
geom_point(data = event_master_df, aes(x = Days, y = newcd_norm_moving,
shape=Events_mler,
Event = Events, Date=DATE,
State=STATE, color=STATE),
alpha = 1, size=3) +
geom_point(data=school_opening_df, aes(x = Days, y = newcd_norm_moving,
shape = Events_mler),
size=3) +
geom_vline(xintercept=0) +
scale_shape_manual(name="", values=c(16,17,4))+
scale_color_discrete(name="")+
xlab("Number of Days Since Mask Order") + ylab("Normalized Daily New Cases") +
theme_bw()
interactive_p <- ggplotly(states_trend, tooltip=c("State", "Date", "Event"))
# clean up legend
for (i in 1:length(interactive_p$x$data)){
if (!is.null(interactive_p$x$data[[i]]$name)){
interactive_p$x$data[[i]]$name =  gsub("\\(","",str_split(interactive_p$x$data[[i]]$name,",")[[1]][1])
}
}
interactive_p
northeast = c("MAINE","MASSACHUSETTS","RHODE ISLAND","CONNECTICUT",
"VERMONT","NEW YORK","PENNSYLVANIA",
"NEW JERSEY","DELAWARE","MARYLAND")
southeast = c("WEST VIRGINIA","VIRGINIA","KENTUCKY",
"NORTH CAROLINA","ALABAMA")
a=c("IOWA","MINNESOTA","WISCONSIN","ILLINOIS","NEBRASKA",
"KANSAS")
b=c("MINNESOTA","WISCONSIN","ILLINOIS","KANSAS")
states = a
event_order = "15M" # can also try 4E
master_df = data.frame(State=character(),
Date=as.Date(character()),
Events=character(),
Newcd_norm=numeric(),
Days = numeric(),
Events_mler=character())
school_opening_df = data.frame()
for (i in (1: length(states))){
state_data <- data[data$STATE==states[i],]
# aggregate by state, date and combine events & values
state_data <- state_data %>%
group_by(STATE, DATE) %>%
summarise(Events = paste(EVENT_CATG_S, collapse = ","),
Newcd_norm = mean(NEWCD_NORM_500),
Events_mler = first(event_MLER))
# turn "NA" into NA
state_data$Events[state_data$Events=="NA"] <- NA
# index of order implementation date
state_mask_ind = which(sapply(state_data$Events, check_event))
# if a state never issues mask order then plot all data
# else the plot starts at the day of mask order
if(length(state_mask_ind)>0){
state_data = state_data[(state_mask_ind-14):nrow(state_data),]
# number of days since implementation
state_data$Days = as.numeric(state_data$DATE-state_data$DATE[1]-14)
# append to final data for plotting
master_df = rbind(master_df,as.data.frame(state_data))}
}
# add a new column of moving average
# otherwise interactive plot cannot show date
master_df$newcd_norm_moving <- rollmean(master_df$Newcd_norm, 7,
fill=NA, align="right")
event_master_df <- master_df[!is.na(master_df$Events) & (master_df$Events!="15M"),]
# change Events_mler on September 14th to be School Opening
school_opening_df <- as.data.frame(master_df[master_df$DATE=="2020-09-07",])
school_opening_df$Events_mler <- "School Opening"
states_trend <- ggplot() +
geom_vline(xintercept=0) +
geom_line(data = master_df, aes(x = Days, y = newcd_norm_moving,
color = STATE, Date=DATE, State=STATE),
size = 1, alpha = 0.5) +
geom_point(data = event_master_df, aes(x = Days, y = newcd_norm_moving,
shape=Events_mler,
Event = Events, Date=DATE,
State=STATE, color=STATE),
alpha = 1, size=3) +
geom_point(data=school_opening_df, aes(x = Days, y = newcd_norm_moving,
shape = Events_mler),
size=3) +
scale_shape_manual(name="", values=c(16,17,4))+
scale_color_discrete(name="")+
xlab("Number of Days Since Mask Order") + ylab("Normalized Daily New Cases") +
theme_bw()
interactive_p <- ggplotly(states_trend, tooltip=c("State", "Date", "Event"))
# clean up legend
for (i in 1:length(interactive_p$x$data)){
if (!is.null(interactive_p$x$data[[i]]$name)){
interactive_p$x$data[[i]]$name =  gsub("\\(","",str_split(interactive_p$x$data[[i]]$name,",")[[1]][1])
}
}
interactive_p
