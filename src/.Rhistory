ggtitle(paste(state, ",","Average Window = ", window_num))
# theme(legend.position="top")
p1 <- ggplotly(plot3) %>%
layout(legend=list(title=list(text='<b> Score Scale</b>')))
p1
}
plot_time_interact(state, window_num)
state = "WASHINGTON"
window_num = 7
plot_time_interact(state, window_num)
plot_time_interact(state, window_num)
# add number line
data$dummy <- -10
# change category events name
# group event categories into easing/lifting and imposing
group_event_catg <- function(x){
new_col = c()
check = substr(x, nchar(x), nchar(x))
if (is.na(check)){
new_col <- append(new_col, x)
} else if(check == "M"){
new_col <- append(new_col, "Mandatory")
} else if (check == "R"){
new_col <- append(new_col, "Re-Issued")
} else if (check == "E"){
new_col <- append(new_col, "Eased")
} else if (check == "L"){
new_col <- append(new_col, "Lifted ")
}
}
data$event_MELR <- sapply(data$EVENT_CATG_S,
FUN=group_event_catg)
# category num
big_catg <- function(x){
new_col = c()
if (is.na(x)){
new_col <- append(new_col, x)
}
else if(x=="15M"){
new_col <- append(new_col, "Face \n Covering")
} else if(grepl("2", x)){
new_col <- append(new_col, "Business \n Restrictions")
} else if(grepl("3", x)){
new_col <- append(new_col, "Indoor Gathering \n Restrictions")
} else if(grepl("4", x)){
new_col <- append(new_col, "Restaurant/Bar \n Restrictions")
} else{
new_col <- append(new_col, "Stay at \n Home Orders")
}
}
data$big_cat <- sapply(data$EVENT_CATG_S, FUN=big_catg)
data$event <- paste(data$big_cat, "\n", data$event_MELR)
# text color bins
bins <- c(-Inf,0,0.25,0.75,1.20,1.55,1.85,2.10,2.35,2.70,3.05,3.40,3.75,
4.00, 5.00)
data$color_scale <- cut(data$SCORE, breaks=bins)
color_v <- c("#ffffff","#fdfec0", "#fdffa3","#ffd799", "#ffb078","#fc8861",
"#f2615d",
"#d8466c","#87377a","#942c81","#721f82","#51127c", "#2d1160",
"#ffd3d1")
color_event_v <- c("#ff0000","#e08c75","#f2cec4","#f2cf05","#ede02b",
"#ada63e","#b3b827","#144d6b", "#07a3f5",
"#81b7d4", "#a3bcc9","#cfeeff", "#9905f5","#c99fe3",
"#480c6e", "#715b80", "#d324f2", "#ffffff")
names(color_event_v) = levels(as.factor(data$event))
names(color_v) = levels(data$color_scale)
text_y_pos <- function(state_event){
y_pos_vec = c(max(state_event[,9])+190)
for (i in 2:nrow(state_event)){
diff = state_event[i,3] - state_event[i-1,3]
if (as.integer(diff)<10){
tmp = y_pos_vec[i-1]-20
y_pos_vec = append(y_pos_vec, tmp)
} else {
y_pos_vec = append(y_pos_vec, max(state_event[,9])+190)
}
}
return(y_pos_vec)
}
plot_time_interact <- function(state, window_num){
state_data <- data[data$STATE==state,]
state_event <- na.omit(state_data[!is.na(state_data$EVENT_CATG_S),])
state_event_date <- state_event$DATE
state_event$txt_y <- text_y_pos(state_event)
plot3 <- ggplot(state_data, aes(DATE, NEWCD_NORM_500)) +
geom_point(size=2, alpha=1) +
stat_rollapplyr(width = window_num, align = "right", size = 2,
col="gray", alpha=1)+
geom_point(mapping=aes(x=DATE, y=dummy, fill=color_scale),
shape=22, size=2, color="transparent")+
scale_fill_manual(values=color_v)+
geom_vline(data=state_event,
aes(xintercept=as.numeric(DATE), color=event),
linetype="dotted")+
geom_text(data=state_event,
aes(x=DATE, y=txt_y, color=event,
label=event), size=3)+
ylim(-15, 250)+
theme(legend.title=element_blank())+
labs(x = "Months", y = "New Daily Cases Normalized")+
scale_x_date(date_breaks = "months" , date_labels = "%b")+
ggtitle(paste(state, ",","Average Window = ", window_num))
# theme(legend.position="top")
p1 <- ggplotly(plot3) %>%
layout(legend=list(title=list(text='<b> Score Scale</b>')))
p1
}
plot_time_interact(state, window_num)
# add number line
data$dummy <- -10
# change category events name
# group event categories into easing/lifting and imposing
group_event_catg <- function(x){
new_col = c()
check = substr(x, nchar(x), nchar(x))
if (is.na(check)){
new_col <- append(new_col, x)
} else if(check == "M"){
new_col <- append(new_col, "Mandatory")
} else if (check == "R"){
new_col <- append(new_col, "Re-Issued")
} else if (check == "E"){
new_col <- append(new_col, "Eased")
} else if (check == "L"){
new_col <- append(new_col, "Lifted ")
}
}
data$event_MELR <- sapply(data$EVENT_CATG_S,
FUN=group_event_catg)
# category num
big_catg <- function(x){
new_col = c()
if (is.na(x)){
new_col <- append(new_col, x)
}
else if(x=="15M"){
new_col <- append(new_col, "Face \n Covering")
} else if(grepl("2", x)){
new_col <- append(new_col, "Business \n Restrictions")
} else if(grepl("3", x)){
new_col <- append(new_col, "Indoor Gathering \n Restrictions")
} else if(grepl("4", x)){
new_col <- append(new_col, "Restaurant/Bar \n Restrictions")
} else{
new_col <- append(new_col, "Stay at \n Home Orders")
}
}
data$big_cat <- sapply(data$EVENT_CATG_S, FUN=big_catg)
data$event <- paste(data$big_cat, "\n", data$event_MELR)
# text color bins
bins <- c(-Inf,0,0.25,0.75,1.20,1.55,1.85,2.10,2.35,2.70,3.05,3.40,3.75,
4.00, 5.00)
data$color_scale <- cut(data$SCORE, breaks=bins)
color_v <- c("#ffffff","#fdfec0", "#fdffa3","#ffd799", "#ffb078","#fc8861",
"#f2615d",
"#d8466c","#87377a","#942c81","#721f82","#51127c", "#2d1160",
"#ffd3d1")
color_event_v <- c("#ff0000","#e08c75","#f2cec4","#f2cf05","#ede02b",
"#ada63e","#b3b827","#144d6b", "#07a3f5",
"#81b7d4", "#a3bcc9","#cfeeff", "#9905f5","#c99fe3",
"#480c6e", "#715b80", "#d324f2", "#ffffff")
names(color_event_v) = levels(as.factor(data$event))
names(color_v) = levels(data$color_scale)
text_y_pos <- function(state_event){
y_pos_vec = c(max(state_event[,9])+190)
for (i in 2:nrow(state_event)){
diff = state_event[i,3] - state_event[i-1,3]
if (as.integer(diff)<10){
tmp = y_pos_vec[i-1]-30
y_pos_vec = append(y_pos_vec, tmp)
} else {
y_pos_vec = append(y_pos_vec, max(state_event[,9])+190)
}
}
return(y_pos_vec)
}
plot_time_interact <- function(state, window_num){
state_data <- data[data$STATE==state,]
state_event <- na.omit(state_data[!is.na(state_data$EVENT_CATG_S),])
state_event_date <- state_event$DATE
state_event$txt_y <- text_y_pos(state_event)
plot3 <- ggplot(state_data, aes(DATE, NEWCD_NORM_500)) +
geom_point(size=2, alpha=1) +
stat_rollapplyr(width = window_num, align = "right", size = 2,
col="gray", alpha=1)+
geom_point(mapping=aes(x=DATE, y=dummy, fill=color_scale),
shape=22, size=2, color="transparent")+
scale_fill_manual(values=color_v)+
geom_vline(data=state_event,
aes(xintercept=as.numeric(DATE), color=event),
linetype="dotted")+
geom_text(data=state_event,
aes(x=DATE, y=txt_y, color=event,
label=event), size=3)+
ylim(-15, 250)+
theme(legend.title=element_blank())+
labs(x = "Months", y = "New Daily Cases Normalized")+
scale_x_date(date_breaks = "months" , date_labels = "%b")+
ggtitle(paste(state, ",","Average Window = ", window_num))
# theme(legend.position="top")
p1 <- ggplotly(plot3) %>%
layout(legend=list(title=list(text='<b> Score Scale</b>')))
p1
}
plot_time_interact(state, window_num)
# add number line
data$dummy <- -10
# change category events name
# group event categories into easing/lifting and imposing
group_event_catg <- function(x){
new_col = c()
check = substr(x, nchar(x), nchar(x))
if (is.na(check)){
new_col <- append(new_col, x)
} else if(check == "M"){
new_col <- append(new_col, "Mandatory")
} else if (check == "R"){
new_col <- append(new_col, "Re-Issued")
} else if (check == "E"){
new_col <- append(new_col, "Eased")
} else if (check == "L"){
new_col <- append(new_col, "Lifted ")
}
}
data$event_MELR <- sapply(data$EVENT_CATG_S,
FUN=group_event_catg)
# category num
big_catg <- function(x){
new_col = c()
if (is.na(x)){
new_col <- append(new_col, x)
}
else if(x=="15M"){
new_col <- append(new_col, "Face \n Covering")
} else if(grepl("2", x)){
new_col <- append(new_col, "Business \n Restrictions")
} else if(grepl("3", x)){
new_col <- append(new_col, "Indoor Gathering \n Restrictions")
} else if(grepl("4", x)){
new_col <- append(new_col, "Restaurant/Bar \n Restrictions")
} else{
new_col <- append(new_col, "Stay at \n Home Orders")
}
}
data$big_cat <- sapply(data$EVENT_CATG_S, FUN=big_catg)
data$event <- paste(data$big_cat, "\n", data$event_MELR)
# text color bins
bins <- c(-Inf,0,0.25,0.75,1.20,1.55,1.85,2.10,2.35,2.70,3.05,3.40,3.75,
4.00, 5.00)
data$color_scale <- cut(data$SCORE, breaks=bins)
color_v <- c("#ffffff","#fdfec0", "#fdffa3","#ffd799", "#ffb078","#fc8861",
"#f2615d",
"#d8466c","#87377a","#942c81","#721f82","#51127c", "#2d1160",
"#ffd3d1")
color_event_v <- c("#ff0000","#e08c75","#f2cec4","#f2cf05","#ede02b",
"#ada63e","#b3b827","#144d6b", "#07a3f5",
"#81b7d4", "#a3bcc9","#cfeeff", "#9905f5","#c99fe3",
"#480c6e", "#715b80", "#d324f2", "#ffffff")
names(color_event_v) = levels(as.factor(data$event))
names(color_v) = levels(data$color_scale)
text_y_pos <- function(state_event){
y_pos_vec = c(max(state_event[,9])+190)
for (i in 2:nrow(state_event)){
diff = state_event[i,3] - state_event[i-1,3]
if (as.integer(diff)<12){
tmp = y_pos_vec[i-1]-30
y_pos_vec = append(y_pos_vec, tmp)
} else {
y_pos_vec = append(y_pos_vec, max(state_event[,9])+190)
}
}
return(y_pos_vec)
}
plot_time_interact <- function(state, window_num){
state_data <- data[data$STATE==state,]
state_event <- na.omit(state_data[!is.na(state_data$EVENT_CATG_S),])
state_event_date <- state_event$DATE
state_event$txt_y <- text_y_pos(state_event)
plot3 <- ggplot(state_data, aes(DATE, NEWCD_NORM_500)) +
geom_point(size=2, alpha=1) +
stat_rollapplyr(width = window_num, align = "right", size = 2,
col="gray", alpha=1)+
geom_point(mapping=aes(x=DATE, y=dummy, fill=color_scale),
shape=22, size=2, color="transparent")+
scale_fill_manual(values=color_v)+
geom_vline(data=state_event,
aes(xintercept=as.numeric(DATE), color=event),
linetype="dotted")+
geom_text(data=state_event,
aes(x=DATE, y=txt_y, color=event,
label=event), size=3)+
ylim(-15, 250)+
theme(legend.title=element_blank())+
labs(x = "Months", y = "New Daily Cases Normalized")+
scale_x_date(date_breaks = "months" , date_labels = "%b")+
ggtitle(paste(state, ",","Average Window = ", window_num))
# theme(legend.position="top")
p1 <- ggplotly(plot3) %>%
layout(legend=list(title=list(text='<b> Score Scale</b>')))
p1
}
plot_time_interact(state, window_num)
# add number line
data$dummy <- -10
# change category events name
# group event categories into easing/lifting and imposing
group_event_catg <- function(x){
new_col = c()
check = substr(x, nchar(x), nchar(x))
if (is.na(check)){
new_col <- append(new_col, x)
} else if(check == "M"){
new_col <- append(new_col, "Mandatory")
} else if (check == "R"){
new_col <- append(new_col, "Re-Issued")
} else if (check == "E"){
new_col <- append(new_col, "Eased")
} else if (check == "L"){
new_col <- append(new_col, "Lifted ")
}
}
data$event_MELR <- sapply(data$EVENT_CATG_S,
FUN=group_event_catg)
# category num
big_catg <- function(x){
new_col = c()
if (is.na(x)){
new_col <- append(new_col, x)
}
else if(x=="15M"){
new_col <- append(new_col, "Face \n Covering")
} else if(grepl("2", x)){
new_col <- append(new_col, "Business \n Restrictions")
} else if(grepl("3", x)){
new_col <- append(new_col, "Indoor Gathering \n Restrictions")
} else if(grepl("4", x)){
new_col <- append(new_col, "Restaurant/Bar \n Restrictions")
} else{
new_col <- append(new_col, "Stay at \n Home Orders")
}
}
data$big_cat <- sapply(data$EVENT_CATG_S, FUN=big_catg)
data$event <- paste(data$big_cat, "\n", data$event_MELR)
# text color bins
bins <- c(-Inf,0,0.25,0.75,1.20,1.55,1.85,2.10,2.35,2.70,3.05,3.40,3.75,
4.00, 5.00)
data$color_scale <- cut(data$SCORE, breaks=bins)
color_v <- c("#ffffff","#fdfec0", "#fdffa3","#ffd799", "#ffb078","#fc8861",
"#f2615d",
"#d8466c","#87377a","#942c81","#721f82","#51127c", "#2d1160",
"#ffd3d1")
color_event_v <- c("#ff0000","#e08c75","#f2cec4","#f2cf05","#ede02b",
"#ada63e","#b3b827","#144d6b", "#07a3f5",
"#81b7d4", "#a3bcc9","#cfeeff", "#9905f5","#c99fe3",
"#480c6e", "#715b80", "#d324f2", "#ffffff")
names(color_event_v) = levels(as.factor(data$event))
names(color_v) = levels(data$color_scale)
text_y_pos <- function(state_event){
y_pos_vec = c(max(state_event[,9])+190)
for (i in 2:nrow(state_event)){
diff = state_event[i,3] - state_event[i-1,3]
if (as.integer(diff)<25){
tmp = y_pos_vec[i-1]-30
y_pos_vec = append(y_pos_vec, tmp)
} else {
y_pos_vec = append(y_pos_vec, max(state_event[,9])+190)
}
}
return(y_pos_vec)
}
plot_time_interact <- function(state, window_num){
state_data <- data[data$STATE==state,]
state_event <- na.omit(state_data[!is.na(state_data$EVENT_CATG_S),])
state_event_date <- state_event$DATE
state_event$txt_y <- text_y_pos(state_event)
plot3 <- ggplot(state_data, aes(DATE, NEWCD_NORM_500)) +
geom_point(size=2, alpha=1) +
stat_rollapplyr(width = window_num, align = "right", size = 2,
col="gray", alpha=1)+
geom_point(mapping=aes(x=DATE, y=dummy, fill=color_scale),
shape=22, size=2, color="transparent")+
scale_fill_manual(values=color_v)+
geom_vline(data=state_event,
aes(xintercept=as.numeric(DATE), color=event),
linetype="dotted")+
geom_text(data=state_event,
aes(x=DATE, y=txt_y, color=event,
label=event), size=3)+
#ylim(-15, 250)+
theme(legend.title=element_blank())+
labs(x = "Months", y = "New Daily Cases Normalized")+
scale_x_date(date_breaks = "months" , date_labels = "%b")+
ggtitle(paste(state, ",","Average Window = ", window_num))
# theme(legend.position="top")
p1 <- ggplotly(plot3) %>%
layout(legend=list(title=list(text='<b> Score Scale</b>')))
p1
}
plot_time_interact(state, window_num)
state="FLORIDA"
plot_time_interact(state, window_num)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(readr)
library(plotly)
library(ggfortify)
library(ggseas)
library(scales)
library(ggrepel)
data <- read_csv("covid.com.csv") %>%
select(c(-1))
# add number line
data$dummy <- -10
# change category events name
# group event categories into easing/lifting and imposing
group_event_catg <- function(x){
new_col = c()
check = substr(x, nchar(x), nchar(x))
if (is.na(check)){
new_col <- append(new_col, x)
} else if(check == "M"){
new_col <- append(new_col, "Mandatory")
} else if (check == "R"){
new_col <- append(new_col, "Re-Issued")
} else if (check == "E"){
new_col <- append(new_col, "Eased")
} else if (check == "L"){
new_col <- append(new_col, "Lifted ")
}
}
data$event_MELR <- sapply(data$EVENT_CATG_S,
FUN=group_event_catg)
# category num
big_catg <- function(x){
new_col = c()
if (is.na(x)){
new_col <- append(new_col, x)
}
else if(x=="15M"){
new_col <- append(new_col, "Face \n Covering")
} else if(grepl("2", x)){
new_col <- append(new_col, "Business \n Restrictions")
} else if(grepl("3", x)){
new_col <- append(new_col, "Indoor Gathering \n Restrictions")
} else if(grepl("4", x)){
new_col <- append(new_col, "Restaurant/Bar \n Restrictions")
} else{
new_col <- append(new_col, "Stay at \n Home Orders")
}
}
data$big_cat <- sapply(data$EVENT_CATG_S, FUN=big_catg)
data$event <- paste(data$big_cat, "\n", data$event_MELR)
# text color bins
bins <- c(-Inf,0,0.25,0.75,1.20,1.55,1.85,2.10,2.35,2.70,3.05,3.40,3.75,
4.00, 5.00)
data$color_scale <- cut(data$SCORE, breaks=bins)
color_v <- c("#ffffff","#fdfec0", "#fdffa3","#ffd799", "#ffb078","#fc8861",
"#f2615d",
"#d8466c","#87377a","#942c81","#721f82","#51127c", "#2d1160",
"#ffd3d1")
color_event_v <- c("#ff0000","#e08c75","#f2cec4","#f2cf05","#ede02b",
"#ada63e","#b3b827","#144d6b", "#07a3f5",
"#81b7d4", "#a3bcc9","#cfeeff", "#9905f5","#c99fe3",
"#480c6e", "#715b80", "#d324f2", "#ffffff")
names(color_event_v) = levels(as.factor(data$event))
names(color_v) = levels(data$color_scale)
text_y_pos <- function(state_event){
y_pos_vec = c(max(state_event[,9])+120)
for (i in 2:nrow(state_event)){
diff = state_event[i,3] - state_event[i-1,3]
if (as.integer(diff)<25){
tmp = y_pos_vec[i-1]-30
y_pos_vec = append(y_pos_vec, tmp)
} else {
y_pos_vec = append(y_pos_vec, max(state_event[,9])+120)
}
}
return(y_pos_vec)
}
plot_time_interact <- function(state, window_num){
state_data <- data[data$STATE==state,]
state_event <- na.omit(state_data[!is.na(state_data$EVENT_CATG_S),])
state_event_date <- state_event$DATE
state_event$txt_y <- text_y_pos(state_event)
plot3 <- ggplot(state_data, aes(DATE, NEWCD_NORM_500)) +
geom_point(size=2, alpha=1) +
stat_rollapplyr(width = window_num, align = "right", size = 2,
col="gray", alpha=1)+
geom_point(mapping=aes(x=DATE, y=dummy, fill=color_scale),
shape=22, size=2, color="transparent")+
scale_fill_manual(values=color_v)+
geom_vline(data=state_event,
aes(xintercept=as.numeric(DATE), color=event),
linetype="dotted")+
geom_text(data=state_event,
aes(x=DATE, y=txt_y, color=event,
label=event), size=3)+
#ylim(-15, 250)+
theme(legend.title=element_blank())+
labs(x = "Months", y = "New Daily Cases Normalized")+
scale_x_date(date_breaks = "months" , date_labels = "%b")+
ggtitle(paste(state, ",","Average Window = ", window_num))
# theme(legend.position="top")
p1 <- ggplotly(plot3) %>%
layout(legend=list(title=list(text='<b> Score Scale</b>')))
p1
}
state = "TEXAS"
window_num = 7
plot_time_interact(state, window_num)
plot_time_interact(state, window_num)
