bs = 2:51
for (b in bs) {
for (k in 1:5) {
testd <- data[samp == k, ]
traind <- data[!(samp == k), ]
train.rows = nrow(traind)
gm = npreg(dates[!(samp == k)], traind[,feature], bws = b)
gm.pred = predict(gm, newdata=dates[samp == k])
err.mat[b-1,k] = mean((gm.pred-testd[,feature])^2)
}
}
bws.err.means = apply(err.mat, 1, mean)
print(bws.err.means)
best.bw = bs[which.min(bws.err.means)]
print(paste(c("The best kernel bw for", state, "is", as.character(best.bw)), collapse=" "))
return(best.bw)
}
}
plot_smooth_func(covid.com, c("PENNSYLVANIA", "WASHINGTON", "CALIFORNIA"), 'NEWCD_NORM_500', method="spline",x=1,y=2,df=NULL,bws=7)
plot_smooth_func <- function(data, states, feature, method="spline", x=1, y=3, df=20, bws=10) {
# top_states = top_pop_states(covid, n)
par(mfrow=c(x,y), mar=c(4,4,2,0.5)) # Setup grid, margins
data = subset(data, !is.na(DATE) & !is.na(data[, feature]))
if (method == "spline") {
for (state in states) {
d = data %>% filter(STATE == state)
dates = as.numeric(d$DATE)
plot(d$DATE, d[,feature], xlab = "Time", ylab = feature, main = paste("COVID cases in", state), pch = 20, cex = 0.5)
if (is.null(df)) {
df = calc_opt_para(d, state, feature, dates, method)
}
sm = smooth.spline(d[,feature]~dates, df=df)
sm.pred = predict(sm, dates)$y
lines(d$DATE, sm.pred, pch = 20, cex = 0.5, col = 3)
}
} else if (method == "gp") {
for (state in states) {
d = data %>% filter(STATE == state)
dates = as.numeric(d$DATE)
dates = (dates-min(dates))/(max(dates)-min(dates))
#kern <- Matern52$new(0)
#trend.0 <- trend_0$new()
#gpk.exp <- GauPro_kernel_model$new(matrix(dates, ncol=1), d[,feature], kernel=kern, parallel=FALSE)
#if (requireNamespace("MASS", quietly = TRUE)) {
#  plot(gpk.exp)
#  axis(1, at=dates, labels=d$DATE)
#}
n = length(dates)
x <- matrix(dates, nrow=n)
y <- matrix(as.vector(d[,feature]), nrow=n)
GPmodel <- GP_fit(x, y)
}
} else { #kernel regression
for (state in states) {
d = data %>% filter(STATE == state)
dates = as.numeric(d$DATE)
plot(d$DATE, d[,feature], xlab = "Time", ylab = feature, main = paste("COVID cases in", state), pch = 20, cex = 0.5)
if (is.null(bws)) {
bws = calc_opt_para(d, state, feature, dates, method)
}
print(bws)
gm = npreg(dates, d[,feature], bws = bws)
gm.pred = predict(gm, newdata=dates)
lines(d$DATE, gm.pred, pch = 20, cex = 0.5, col = 5)
}
}
}
calc_opt_para <- function(data, state, feature, dates, method="spline") {
n = dim(data)[1]
m = n%%5
err.mat = matrix(rep(0, 5*50), ncol = 5)
if (m == 0) {
samp = sample(rep(1:5, n%/%5), replace = FALSE)
} else {
samp = sample(c(rep(1:5, n%/%5),1:m), replace = FALSE)
}
if (method == "spline") {
dfs = 2:51
for (df in dfs) {
for (k in 1:5) {
testd <- data[samp == k, ]
traind <- data[!(samp == k), ]
train.rows = nrow(traind)
sm = smooth.spline(traind[,feature]~dates[!(samp == k)], df=df)
sm.pred = predict(sm, dates[samp == k])$y
err.mat[df-1,k] = mean((sm.pred-testd[,feature])^2)
}
}
df.err.means = apply(err.mat, 1, mean)
best.df = dfs[which.min(df.err.means)]
print(paste(c("The best spline df for", state, "is", as.character(best.df)), collapse=" "))
return(best.df)
} else { #kernel regression
bs = 2:51
for (b in bs) {
for (k in 1:5) {
testd <- data[samp == k, ]
traind <- data[!(samp == k), ]
train.rows = nrow(traind)
gm = npreg(dates[!(samp == k)], traind[,feature], bws = b)
gm.pred = predict(gm, newdata=dates[samp == k])
err.mat[b-1,k] = mean((gm.pred-testd[,feature])^2)
}
}
bws.err.means = apply(err.mat, 1, mean)
print(bws.err.means)
best.bw = bs[which.min(bws.err.means)]
print(paste(c("The best kernel bw for", state, "is", as.character(best.bw)), collapse=" "))
return(best.bw)
}
}
plot_smooth_func <- function(data, states, feature, method="spline", x=1, y=3, df=20, bws=10) {
# top_states = top_pop_states(covid, n)
par(mfrow=c(x,y), mar=c(4,4,2,0.5)) # Setup grid, margins
data = subset(data, !is.na(DATE) & !is.na(data[, feature]))
if (method == "spline") {
for (state in states) {
d = data %>% filter(STATE == state)
dates = as.numeric(d$DATE)
plot(d$DATE, d[,feature], xlab = "Time", ylab = feature, main = paste("COVID cases in", state), pch = 20, cex = 0.5)
if (is.null(df)) {
df = calc_opt_para(d, state, feature, dates, method)
}
sm = smooth.spline(d[,feature]~dates, df=df)
sm.pred = predict(sm, dates)$y
lines(d$DATE, sm.pred, pch = 20, cex = 0.5, col = 3)
}
} else if (method == "gp") {
for (state in states) {
d = data %>% filter(STATE == state)
dates = as.numeric(d$DATE)
dates = (dates-min(dates))/(max(dates)-min(dates))
#kern <- Matern52$new(0)
#trend.0 <- trend_0$new()
#gpk.exp <- GauPro_kernel_model$new(matrix(dates, ncol=1), d[,feature], kernel=kern, parallel=FALSE)
#if (requireNamespace("MASS", quietly = TRUE)) {
#  plot(gpk.exp)
#  axis(1, at=dates, labels=d$DATE)
#}
n = length(dates)
x <- matrix(dates, nrow=n)
y <- matrix(as.vector(d[,feature]), nrow=n)
GPmodel <- GP_fit(x, y)
}
} else { #kernel regression
for (state in states) {
d = data %>% filter(STATE == state)
dates = as.numeric(d$DATE)
plot(d$DATE, d[,feature], xlab = "Time", ylab = feature, main = paste("COVID cases in", state), pch = 20, cex = 0.5)
if (is.null(bws)) {
bws = calc_opt_para(d, state, feature, dates, method)
}
print(bws)
gm = npreg(dates, d[,feature], bws = bws)
gm.pred = predict(gm, newdata=dates)
lines(d$DATE, gm.pred, pch = 20, cex = 0.5, col = 5)
}
}
}
plot_smooth_func(covid.com, c("PENNSYLVANIA", "WASHINGTON", "CALIFORNIA"), 'NEWCD_NORM_500', method="kernel",x=1,y=2,df=20,bws=50)
plot_smooth_func <- function(data, states, feature, method="spline", x=1, y=3, df=20, bws=10) {
# top_states = top_pop_states(covid, n)
par(mfrow=c(x,y), mar=c(4,4,2,0.5)) # Setup grid, margins
data = subset(data, !is.na(DATE) & !is.na(data[, feature]))
if (method == "spline") {
for (state in states) {
d = data %>% filter(STATE == state)
dates = as.numeric(d$DATE)
plot(d$DATE, d[,feature], xlab = "Time", ylab = feature, main = paste("COVID cases in", state), pch = 20, cex = 0.5)
if (is.null(df)) {
df = calc_opt_para(d, state, feature, dates, method)
}
sm = smooth.spline(d[,feature]~dates, df=df)
sm.pred = predict(sm, dates)$y
lines(d$DATE, sm.pred, pch = 20, cex = 0.5, col = 3)
}
} else if (method == "gp") {
for (state in states) {
d = data %>% filter(STATE == state)
dates = as.numeric(d$DATE)
dates = (dates-min(dates))/(max(dates)-min(dates))
#kern <- Matern52$new(0)
#trend.0 <- trend_0$new()
#gpk.exp <- GauPro_kernel_model$new(matrix(dates, ncol=1), d[,feature], kernel=kern, parallel=FALSE)
#if (requireNamespace("MASS", quietly = TRUE)) {
#  plot(gpk.exp)
#  axis(1, at=dates, labels=d$DATE)
#}
n = length(dates)
x <- matrix(dates, nrow=n)
y <- matrix(as.vector(d[,feature]), nrow=n)
GPmodel <- GP_fit(x, y)
}
} else { #kernel regression
for (state in states) {
d = data %>% filter(STATE == state)
dates = as.numeric(d$DATE)
plot(d$DATE, d[,feature], xlab = "Time", ylab = feature, main = paste("COVID cases in", state), pch = 20, cex = 0.5)
if (is.null(bws)) {
bws = calc_opt_para(d, state, feature, dates, method)
}
gm = npreg(dates, d[,feature], bws = bws)
gm.pred = predict(gm, newdata=dates)
lines(d$DATE, gm.pred, pch = 20, cex = 0.5, col = 5)
}
}
}
plot_smooth_func(covid.com, c("PENNSYLVANIA", "WASHINGTON", "CALIFORNIA"), 'NEWCD_NORM_500', method="kernel",x=1,y=2,df=20,bws=NULL)
set.seed(0)
V = rnorm(200)
X = -2*V + rnorm(200)
Y = -X + rnorm(200)
Z = 2*X + rnorm(200)
W = -2*V + 3*Y + 5*Z + rnorm(200)
indexes = 1:200
plot(indexes, W, xlab = "point index", ylab = "observation", pch=20, cex = 0.5, type="l", col=2, main="Distribution of P^C(X,W)")
lines(indexes, X, pch=20, cex = 0.5, type="l", col=5)
legend(185, -30, legend=c("W", "X"),
col=c(2,5), lty=1:2, cex=0.45)
set.seed(0)
V = rnorm(200)
X = -2*V + rnorm(200)
Y = -X + rnorm(200)
Z = rep(1,200)
W = -2*V + 3*Y + 5*Z + rnorm(200)
plot(indexes, W, xlab = "point index", ylab = "observation", pch=20, cex = 0.5, type="l", col=2, main="Distribution of P^C;do(Z=1)(X,W)")
lines(indexes, X, pch=20, cex = 0.5, type="l", col=5)
legend(185, -5, legend=c("W", "X"),
col=c(2,5), lty=1:2, cex=0.45)
set.seed(0)
V = rnorm(200)
X = -2*V + rnorm(200)
Y = -X + rnorm(200)
Z = 2*X + rnorm(200)
W = -2*V + 3*Y + 5*Z + rnorm(200)
indexes = 1:200
hist(W, col="pink", freq=FALSE, breaks=0:20,
xlab="Word length", main="Trump word lengths")
hist(W, col="pink", freq=FALSE, breaks=0:20,
xlab="Word length", main="Trump word lengths")
hist(W, col="pink", freq=FALSE, breaks=20,
xlab="Word length", main="Trump word lengths")
hist(X, col=rgb(0,0.5,0.5,0.5), # Note: using a transparent color
freq=FALSE, breaks=0:20, add=TRUE)
hist(W, col="pink", freq=FALSE, breaks=20,
xlab="Word length", main="Trump word lengths")
hist(X, col=rgb(0,0.5,0.5,0.5), # Note: using a transparent color
freq=FALSE, breaks=20, add=TRUE)
legend(legend=c("W", "X"), col=c("pink","blue"), lty=1:2, cex=0.45)
hist(W, col="pink", freq=FALSE,
xlab="Word length", main="Trump word lengths")
hist(X, col=rgb(0,0.5,0.5,0.5), # Note: using a transparent color
freq=FALSE, add=TRUE)
legend(legend=c("W", "X"), col=c("pink","blue"), lty=1:2, cex=0.45)
hist(W, col="pink", freq=FALSE,
xlab="Word length", main="Trump word lengths")
hist(X, col=rgb(0,0.5,0.5,0.5), # Note: using a transparent color
freq=FALSE, add=TRUE)
legend("topright", c("W", "X"), col=c("pink", "blue"), lwd=10)
hist(W, col="pink", freq=FALSE,
xlab="Word length", main="Trump word lengths")
hist(X, col=rgb(0,0.5,0.5,0.5), # Note: using a transparent color
freq=FALSE, add=TRUE)
legend("topright", c("W", "X"), col=c("pink", 5), lwd=10)
hist(W, col="pink", freq=FALSE,
xlab="Word length", main="Trump word lengths")
hist(X, col=rgb(0,0.5,0.5,0.5), # Note: using a transparent color
freq=FALSE, add=TRUE)
legend("topright", c("W", "X"), col=c("pink", "lightblue"), lwd=10)
hist(W, col="pink", freq=TRUE,
xlab="magnitude", main="Distribution of P^C(X,W)")
hist(X, col=rgb(0,0.5,0.5,0.5), # Note: using a transparent color
freq=TRUE, add=TRUE)
legend("topright", c("W", "X"), col=c("pink", "lightblue"), lwd=10)
set.seed(0)
V = rnorm(200)
X = -2*V + rnorm(200)
Y = -X + rnorm(200)
Z = rep(1,200)
W = -2*V + 3*Y + 5*Z + rnorm(200)
hist(W, col="pink", freq=TRUE,
xlab="magnitude", main="Distribution of P^C(X,W)")
hist(X, col=rgb(0,0.5,0.5,0.5), # Note: using a transparent color
freq=TRUE, add=TRUE)
legend("topright", c("W", "X"), col=c("pink", "lightblue"), lwd=10)
hist(W, col="pink", freq=TRUE,
xlab="magnitude", main="Distribution of P^C;do(Z=1)(X,W)")
hist(X, col=rgb(0,0.5,0.5,0.5), # Note: using a transparent color
freq=TRUE, add=TRUE)
legend("topright", c("W", "X"), col=c("pink", "lightblue"), lwd=10)
par(mfrow=c(1,2), mar=c(4,4,2,0.5))
hist(W, col="green", freq=TRUE,
xlab="magnitude", main="Distribution of P^C(W)")
hist(X, col="blue", freq=TRUE, xlab="magnitude", main="Distribution of P^C(X)")
set.seed(1)
V = rnorm(200)
X = -2*V + rnorm(200)
Y = -X + rnorm(200)
Z = 2*X + rnorm(200)
W = -2*V + 3*Y + 5*Z + rnorm(200)
par(mfrow=c(1,2), mar=c(4,4,2,0.5))
hist(W, col="green", freq=TRUE,
xlab="magnitude", main="Distribution of P^C(W)")
hist(X, col="blue", freq=TRUE, xlab="magnitude", main="Distribution of P^C(X)")
par(mfrow=c(1,2), mar=c(4,4,2,0.5))
hist(W, col="green", freq=TRUE,
xlab="magnitude", main="Distribution of W")
hist(X, col="blue", freq=TRUE, xlab="magnitude", main="Distribution of X")
par(mfrow=c(1,2), mar=c(4,4,2,0.5))
hist(W, col="green", freq=TRUE,
xlab="magnitude", main="Distribution of W")
hist(X, col="blue", freq=TRUE, xlab="magnitude", main="Distribution of X")
par(mfrow=c(1,2), mar=c(4,4,2,0.5))
hist(W, col="green", freq=TRUE, main="Distribution of W")
hist(X, col="blue", freq=TRUE, main="Distribution of X")
set.seed(1)
V = rnorm(200)
X = -2*V + rnorm(200)
Y = -X + rnorm(200)
Z = rep(1,200)
W = -2*V + 3*Y + 5*Z + rnorm(200)
par(mfrow=c(1,2), mar=c(4,4,2,0.5))
hist(W, col="green", freq=TRUE, main="Distribution of W")
hist(X, col="blue", freq=TRUE, main="Distribution of X")
set.seed(0)
V = rnorm(200)
X = 2*V + rnorm(200)
Y = -X + rnorm(200)
Z = 2*X + rnorm(200)
W = -2*V + 3*Y + 5*Z + rnorm(200)
set.seed(0)
V = rnorm(200)
X = 2*V + rnorm(200)
Y = -X + rnorm(200)
Z = 2*X + rnorm(200)
W = -2*V + 3*Y + 5*Z + rnorm(200)
indexes = 1:200
par(mfrow=c(1,2), mar=c(4,4,2,0.5))
hist(W, col="green", freq=TRUE, main="Distribution of W")
hist(X, col="blue", freq=TRUE, main="Distribution of X")
set.seed(1)
V = rnorm(200)
X = 2*V + rnorm(200)
Y = -X + rnorm(200)
Z = 2*X + rnorm(200)
W = -2*V + 3*Y + 5*Z + rnorm(200)
indexes = 1:200
par(mfrow=c(1,2), mar=c(4,4,2,0.5))
hist(W, col="green", freq=TRUE, main="Distribution of W")
hist(X, col="blue", freq=TRUE, main="Distribution of X")
set.seed(1)
V = rnorm(200)
X = 2*V + rnorm(200)
Y = -X + rnorm(200)
Z = rep(1,200)
W = -2*V + 3*Y + 5*Z + rnorm(200)
par(mfrow=c(1,2), mar=c(4,4,2,0.5))
hist(W, col="green", freq=TRUE, main="Distribution of W")
hist(X, col="blue", freq=TRUE, main="Distribution of X")
rep(1,10)
plot_smooth_func(covid.com, c("PENNSYLVANIA", "WASHINGTON", "CALIFORNIA"), 'NEWCD_NORM_500', method="spline",x=1,y=2,df=NULL,bws=7)
plot_smooth_func(covid.com, c("PENNSYLVANIA", "WASHINGTON", "CALIFORNIA"), 'NEWCD_NORM_500', method="kernel",x=1,y=2,df=20,bws=NULL)
plot_smooth_func(covid.com, c("WASHINGTON", "CALIFORNIA"), 'NEWCD_NORM_500', method="spline",x=1,y=2,df=NULL,bws=7)
plot_smooth_func(covid.com, c("CALIFORNIA"), 'NEWCD_NORM_500', method="spline",x=1,y=2,df=NULL,bws=7)
plot_smooth_func(covid.com, c("FLORIDA"), 'NEWCD_NORM_500', method="spline",x=1,y=2,df=NULL,bws=7)
plot_smooth_func <- function(data, states, feature, method="spline", x=1, y=3, df=20, bws=10) {
# top_states = top_pop_states(covid, n)
par(mfrow=c(x,y), mar=c(4,4,2,0.5)) # Setup grid, margins
data = subset(data, !is.na(DATE) & !is.na(data[, feature]))
if (method == "spline") {
for (state in states) {
d = data %>% filter(STATE == state)
dates = as.numeric(d$DATE)
plot(d$DATE, d[,feature], xlab = "Time", ylab = feature, main = paste("COVID cases in", state), pch = 20, cex = 0.5)
if (is.null(df)) {
df = calc_opt_para(d, state, feature, dates, method)
}
sm = smooth.spline(d[,feature]~dates, df=df)
sm.pred = predict(sm, dates)$y
lines(d$DATE, sm.pred, pch = 20, cex = 0.5, col = 3)
}
} else if (method == "gp") {
for (state in states) {
d = data %>% filter(STATE == state, DATE != NA)
dates = as.numeric(d$DATE)
dates = (dates-min(dates))/(max(dates)-min(dates))
#kern <- Matern52$new(0)
#trend.0 <- trend_0$new()
#gpk.exp <- GauPro_kernel_model$new(matrix(dates, ncol=1), d[,feature], kernel=kern, parallel=FALSE)
#if (requireNamespace("MASS", quietly = TRUE)) {
#  plot(gpk.exp)
#  axis(1, at=dates, labels=d$DATE)
#}
n = length(dates)
x <- matrix(dates, nrow=n)
y <- matrix(as.vector(d[,feature]), nrow=n)
GPmodel <- GP_fit(x, y)
}
} else { #kernel regression
for (state in states) {
d = data %>% filter(STATE == state)
dates = as.numeric(d$DATE)
plot(d$DATE, d[,feature], xlab = "Time", ylab = feature, main = paste("COVID cases in", state), pch = 20, cex = 0.5)
if (is.null(bws)) {
bws = calc_opt_para(d, state, feature, dates, method)
}
gm = npreg(dates, d[,feature], bws = bws)
gm.pred = predict(gm, newdata=dates)
lines(d$DATE, gm.pred, pch = 20, cex = 0.5, col = 5)
}
}
}
plot_smooth_func(covid.com, c("PENNSYLVANIA", "WASHINGTON", "CALIFORNIA"), 'NEWCD_NORM_500', method="kernel",x=1,y=2,df=20,bws=NULL)
plot_smooth_func <- function(data, states, feature, method="spline", x=1, y=3, df=20, bws=10) {
# top_states = top_pop_states(covid, n)
par(mfrow=c(x,y), mar=c(4,4,2,0.5)) # Setup grid, margins
data = subset(data, !is.na(DATE) & !is.na(data[, feature]))
if (method == "spline") {
for (state in states) {
d = data %>% filter(STATE == state)
dates = as.numeric(d$DATE)
plot(d$DATE, d[,feature], xlab = "Time", ylab = feature, main = paste("COVID cases in", state), pch = 20, cex = 0.5)
if (is.null(df)) {
df = calc_opt_para(d, state, feature, dates, method)
}
sm = smooth.spline(d[,feature]~dates, df=df)
sm.pred = predict(sm, dates)$y
lines(d$DATE, sm.pred, pch = 20, cex = 0.5, col = 3)
}
} else if (method == "gp") {
for (state in states) {
d = data %>% filter(STATE == state)
dates = as.numeric(d$DATE)
dates = (dates-min(dates))/(max(dates)-min(dates))
#kern <- Matern52$new(0)
#trend.0 <- trend_0$new()
#gpk.exp <- GauPro_kernel_model$new(matrix(dates, ncol=1), d[,feature], kernel=kern, parallel=FALSE)
#if (requireNamespace("MASS", quietly = TRUE)) {
#  plot(gpk.exp)
#  axis(1, at=dates, labels=d$DATE)
#}
n = length(dates)
x <- matrix(dates, nrow=n)
y <- matrix(as.vector(d[,feature]), nrow=n)
GPmodel <- GP_fit(x, y)
}
} else { #kernel regression
for (state in states) {
d = data %>% filter(STATE == state, DATE != NA)
dates = as.numeric(d$DATE)
plot(d$DATE, d[,feature], xlab = "Time", ylab = feature, main = paste("COVID cases in", state), pch = 20, cex = 0.5)
if (is.null(bws)) {
bws = calc_opt_para(d, state, feature, dates, method)
}
gm = npreg(dates, d[,feature], bws = bws)
gm.pred = predict(gm, newdata=dates)
lines(d$DATE, gm.pred, pch = 20, cex = 0.5, col = 5)
}
}
}
plot_smooth_func(covid.com, c("PENNSYLVANIA", "WASHINGTON", "CALIFORNIA"), 'NEWCD_NORM_500', method="kernel",x=1,y=2,df=20,bws=NULL)
plot_smooth_func(covid.com, c("PENNSYLVANIA", "WASHINGTON", "CALIFORNIA"), 'NEWCD_NORM_500', method="kernel",x=1,y=2,df=20,bws=NULL)
plot_smooth_func(covid.com, c("PENNSYLVANIA", "WASHINGTON", "CALIFORNIA"), 'NEWCD_NORM_500', method="kernel",x=1,y=2,df=20,bws=NULL)
plot_smooth_func <- function(data, states, feature, method="spline", x=1, y=3, df=20, bws=10) {
# top_states = top_pop_states(covid, n)
par(mfrow=c(x,y), mar=c(4,4,2,0.5)) # Setup grid, margins
data = subset(data, !is.na(DATE) & !is.na(data[, feature]))
if (method == "spline") {
for (state in states) {
d = data %>% filter(STATE == state)
dates = as.numeric(d$DATE)
plot(d$DATE, d[,feature], xlab = "Time", ylab = feature, main = paste("COVID cases in", state), pch = 20, cex = 0.5)
if (is.null(df)) {
df = calc_opt_para(d, state, feature, dates, method)
}
sm = smooth.spline(d[,feature]~dates, df=df)
sm.pred = predict(sm, dates)$y
lines(d$DATE, sm.pred, pch = 20, cex = 0.5, col = 3)
}
} else if (method == "gp") {
for (state in states) {
d = data %>% filter(STATE == state)
dates = as.numeric(d$DATE)
dates = (dates-min(dates))/(max(dates)-min(dates))
#kern <- Matern52$new(0)
#trend.0 <- trend_0$new()
#gpk.exp <- GauPro_kernel_model$new(matrix(dates, ncol=1), d[,feature], kernel=kern, parallel=FALSE)
#if (requireNamespace("MASS", quietly = TRUE)) {
#  plot(gpk.exp)
#  axis(1, at=dates, labels=d$DATE)
#}
n = length(dates)
x <- matrix(dates, nrow=n)
y <- matrix(as.vector(d[,feature]), nrow=n)
GPmodel <- GP_fit(x, y)
}
} else { #kernel regression
for (state in states) {
d = data %>% filter(STATE == state)
dates = as.numeric(d$DATE)
plot(d$DATE, d[,feature], xlab = "Time", ylab = feature, main = paste("COVID cases in", state), pch = 20, cex = 0.5)
if (is.null(bws)) {
bws = calc_opt_para(d, state, feature, dates, method)
}
gm = npreg(dates, d[,feature], bws = bws)
gm.pred = predict(gm, newdata=dates)
lines(d$DATE, gm.pred, pch = 20, cex = 0.5, col = 5)
}
}
}
plot_smooth_func(covid.com, c("FLORIDA"), 'NEWCD_NORM_500', method="spline",x=1,y=2,df=NULL,bws=7)
plot_smooth_func(covid.com, c("PENNSYLVANIA", "WASHINGTON", "CALIFORNIA"), 'NEWCD_NORM_500', method="kernel",x=1,y=2,df=20,bws=NULL)
